<!DOCTYPE html>
<html>
<head>
    <title>olution iot datas</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
    <meta name="theme-color" content="#008B74" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
    <link rel="stylesheet" href="/assets/css/main.css" />
    <noscript><link rel="stylesheet" href="/assets/css/noscript.css" /></noscript>
    <!-- Font Awesome avec préchargement et solution de repli SVG -->
    <link rel="preload" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/webfonts/fa-solid-900.woff2" as="font" type="font/woff2" crossorigin>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <!-- Solution de repli : Font Awesome en mode SVG/JS (plus robuste, ne dépend pas des polices) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/js/all.min.js" integrity="sha512-GWzVrcGlo0TxTRvz9ttioyYJ+Wwk9Ck0G81D+eO63BaqHaJ3YZX9wuqjwgfcV/MrB2PhaVX9DkYVhbFpStnqpQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <link rel="stylesheet" href="/ffp3/assets/css/realtime-styles.css" />
    <link rel="manifest" href="/ffp3/manifest.json" />
    <link rel="apple-touch-icon" href="/ffp3/assets/icons/icon-192.png" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <link rel="shortcut icon" type="image/png" href="https://iot.olution.info/images/favico.png"/>
    
    <!-- Control Sync - Temps réel -->
    <style>
        /* ========================================
           RESET POUR ÉVITER CONFLITS CSS
           ======================================== */
        * {
            box-sizing: border-box;
        }
        
        /* ========================================
           STYLES MODERNES POUR LES BOUTONS D'ACTION
           ======================================== */
        
        /* Grille responsive pour les boutons d'action */
        .action-buttons-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(min(100%, 280px), 1fr));
            gap: 0.75rem;
            width: 100%;
            padding: 0;
            margin: 0;
        }
        
        /* Carte de bouton d'action simple */
        .action-button-card {
            background: #ffffff;
            border-radius: 8px;
            padding: 0.75rem;
            border: 2px solid #e8e8e8;
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 0.75rem;
            cursor: pointer;
            transition: border-color 0.3s, background-color 0.3s;
        }
        
        /* Effet hover */
        .action-button-card:hover {
            border-color: #ccc;
            background: #f8f9fa;
        }
        
        /* État activé */
        .action-button-card[data-state="1"] {
            border-color: currentColor;
            background: #f0f8f7;
        }
        
        /* Contenu du bouton */
        .action-button-content {
            display: flex;
            align-items: center;
            gap: 0.625rem;
            flex: 1;
            min-width: 0;
        }
        
        /* Icône simple - directement visible sans conteneur */
        .action-icon-simple {
            font-size: 1.8rem;
            margin-right: 12px;
            flex-shrink: 0;
            transition: transform 0.3s;
        }
        
        .action-button-card:hover .action-icon-simple {
            transform: scale(1.1);
        }
        
        
        /* Informations du bouton */
        .action-button-info {
            flex: 1;
            min-width: 0;
        }
        
        .action-button-label {
            font-weight: 600;
            font-size: 0.9rem;
            color: #2c3e50;
            margin-bottom: 0.25rem;
            line-height: 1.3;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }
        
        .action-button-status {
            font-size: 0.75rem;
            color: #7f8c8d;
            font-weight: 500;
            transition: all 0.3s;
        }
        
        .action-button-card[data-state="1"] .action-button-status {
            color: currentColor;
            font-weight: 600;
        }
        
        /* Switch moderne - Plus élégant */
        .modern-switch {
            position: relative;
            display: inline-block;
            width: 52px;
            height: 28px;
            flex-shrink: 0;
            cursor: pointer;
        }
        
        .modern-switch input {
            opacity: 0;
            width: 0;
            height: 0;
            position: absolute;
        }
        
        .modern-switch-slider {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(145deg, #d0d7de, #e5e9ed);
            border-radius: 32px;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .modern-switch-button {
            position: absolute;
            content: '';
            height: 22px;
            width: 22px;
            left: 3px;
            bottom: 3px;
            background: white;
            border-radius: 50%;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.25);
        }
        
        .modern-switch input:checked + .modern-switch-slider {
            background: currentColor;
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.2),
                        0 0 16px currentColor;
        }
        
        .modern-switch input:checked + .modern-switch-slider .modern-switch-button {
            transform: translateX(24px);
            box-shadow: 0 3px 12px rgba(0, 0, 0, 0.3);
        }
        
        .modern-switch:hover .modern-switch-slider {
            box-shadow: 0 0 12px rgba(0, 0, 0, 0.2);
        }
        
        /* Couleurs par type d'actionneur - Plus vibrantes */
        .action-button-blue {
            color: #2980b9;
        }
        
        .action-button-cyan {
            color: #00bcd4;
        }
        
        .action-button-red {
            color: #e74c3c;
        }
        
        .action-button-yellow {
            color: #f39c12;
        }
        
        .action-button-purple {
            color: #9b59b6;
        }
        
        .action-button-orange {
            color: #e67e22;
        }
        
        .action-button-pink {
            color: #e91e63;
        }
        
        .action-button-green {
            color: #27ae60;
        }
        
        .action-button-default {
            color: #008B74;
        }
        
        /* Responsive - Tablettes */
        @media (max-width: 1024px) {
            .action-buttons-grid {
                grid-template-columns: repeat(auto-fit, minmax(min(100%, 260px), 1fr));
                gap: 0.875rem;
            }
            
            .action-button-card {
                padding: 0.875rem;
            }
            
            .action-button-icon {
                width: 46px;
                height: 46px;
                font-size: 1.5rem;
            }
            
            .action-button-label {
                font-size: 0.95rem;
            }
        }
        
        /* Responsive - Mobile */
        @media (max-width: 768px) {
            .action-buttons-grid {
                grid-template-columns: 1fr;
                gap: 0.75rem;
            }
            
            .action-button-card {
                padding: 0.875rem;
            }
            
            .action-button-icon {
                width: 44px;
                height: 44px;
                font-size: 1.4rem;
                border-radius: 12px;
            }
            
            .action-button-label {
                font-size: 0.9rem;
            }
            
            .action-button-status {
                font-size: 0.8rem;
            }
            
            .modern-switch {
                width: 52px;
                height: 28px;
            }
            
            .modern-switch-button {
                height: 22px;
                width: 22px;
            }
            
            .modern-switch input:checked + .modern-switch-slider .modern-switch-button {
                transform: translateX(24px);
            }
        }
        
        /* Très petits écrans */
        @media (max-width: 400px) {
            .action-button-content {
                gap: 0.625rem;
            }
            
            .action-button-icon {
                width: 40px;
                height: 40px;
                font-size: 1.25rem;
                border-radius: 10px;
            }
            
            .action-button-label {
                font-size: 0.85rem;
            }
            
            .action-button-status {
                font-size: 0.75rem;
            }
            
            .modern-switch {
                width: 48px;
                height: 26px;
            }
            
            .modern-switch-button {
                height: 20px;
                width: 20px;
                left: 3px;
                bottom: 3px;
            }
            
            .modern-switch input:checked + .modern-switch-slider .modern-switch-button {
                transform: translateX(22px);
            }
        }
        
        /* Badge de synchronisation (coin haut-droit) */
        #control-sync-badge {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 0.75em;
            font-weight: bold;
            letter-spacing: 0.5px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
            transition: all 0.3s ease;
            cursor: default;
        }
        
        /* États du badge */
        #control-sync-badge.connecting {
            background: linear-gradient(135deg, #ffa726, #fb8c00);
            color: white;
            animation: pulse 1.5s ease-in-out infinite;
        }
        
        #control-sync-badge.online {
            background: linear-gradient(135deg, #66bb6a, #43a047);
            color: white;
        }
        
        #control-sync-badge.offline {
            background: linear-gradient(135deg, #bdbdbd, #9e9e9e);
            color: white;
        }
        
        #control-sync-badge.error {
            background: linear-gradient(135deg, #ef5350, #e53935);
            color: white;
        }
        
        #control-sync-badge.warning {
            background: linear-gradient(135deg, #ffca28, #ffa000);
            color: white;
            animation: pulse 1s ease-in-out infinite;
        }
        
        #control-sync-badge.paused {
            background: linear-gradient(135deg, #90caf9, #42a5f5);
            color: white;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.8; transform: scale(1.05); }
        }
        
        /* Animation flash pour changement d'état */
        .state-changed {
            animation: stateFlash 1s ease-out;
        }
        
        @keyframes stateFlash {
            0% { background-color: #fff3cd; }
            50% { background-color: #ffc107; }
            100% { background-color: #f8f9fa; }
        }
        
        /* Responsive mobile */
        @media (max-width: 768px) {
            #control-sync-badge {
                top: 10px;
                right: 10px;
                padding: 6px 12px;
                font-size: 0.7em;
            }
        }
        
        /* Responsive mobile - Actionneurs et boutons */
        @media (max-width: 768px) {
            /* Grille des actionneurs : une seule colonne sur mobile */
            .control-grid .left-column > section > div[style*="grid-template-columns"] {
                grid-template-columns: 1fr !important;
                gap: 10px !important;
            }
            
            /* Cartes d'actionneurs plus compactes */
            .control-grid .left-column > section > div > div {
                padding: 10px !important;
                font-size: 0.9em !important;
                flex-direction: row !important;
                justify-content: space-between !important;
                align-items: center !important;
            }
            
            /* Switch plus petit sur mobile */
            .switch {
                transform: scale(0.7) !important;
                transform-origin: right center !important;
            }
            
            /* Icônes plus petites */
            .switch-icon {
                font-size: 1.1em !important;
                margin-right: 8px !important;
                width: 25px !important;
            }
            
            /* Sections avec moins de padding */
            .compact-section {
                padding: 12px !important;
                margin-bottom: 15px !important;
            }
            
            .compact-section h3 {
                font-size: 1em !important;
            }
            
            /* Param-box plus compactes */
            .param-box {
                padding: 12px !important;
                margin-bottom: 12px !important;
            }
            
            .param-box h4 {
                font-size: 0.9em !important;
            }
            
            /* Boutons actions rapides : empilés sur mobile */
            .control-grid + section > div {
                flex-direction: column !important;
                gap: 8px !important;
            }
            
            .control-grid + section > div a {
                width: 100% !important;
                justify-content: center !important;
                padding: 10px 16px !important;
            }
        }
        
        /* Très petits écrans (< 400px) */
        @media (max-width: 400px) {
            .compact-section {
                padding: 10px !important;
            }
            
            .control-grid .left-column > section > div > div {
                padding: 8px !important;
                font-size: 0.85em !important;
            }
            
            .switch {
                transform: scale(0.6) !important;
            }
            
            .switch-icon {
                font-size: 1em !important;
                width: 20px !important;
            }
        }
    </style>
    <style>
        /* Reset et fix total pour éviter les conflits CSS */
        article.post.featured {
            overflow: visible !important;
        }
        
        .control-grid {
            display: block !important;
            width: 100% !important;
            clear: both !important;
            overflow: visible !important;
            position: relative !important;
        }
        
        .control-grid * {
            box-sizing: border-box !important;
        }
        
        /* Layout optimisé pour desktop */
        @media (min-width: 1200px) {
            .control-grid {
                display: flex !important;
                flex-wrap: wrap !important;
                gap: 20px !important;
            }
            
            .control-grid .left-column {
                flex: 1 1 48% !important;
                min-width: 0 !important;
                display: block !important;
            }
            
            .control-grid .right-column {
                flex: 1 1 48% !important;
                min-width: 0 !important;
                display: block !important;
            }
        }
        
        /* Responsive pour tablettes et mobile */
        @media (max-width: 1199px) {
            .control-grid .left-column,
            .control-grid .right-column {
                width: 100% !important;
                display: block !important;
            }
        }
        
        /* Sections */
        .compact-section {
            padding: 15px !important;
            margin-bottom: 20px !important;
            display: block !important;
            overflow: visible !important;
        }
        
        .compact-section h3 {
            font-size: 1.1em !important;
            margin-bottom: 10px !important;
            display: block !important;
        }
        
        .compact-section h4 {
            font-size: 1em !important;
            margin: 10px 0 8px 0 !important;
            display: block !important;
        }
        
        /* Icônes pour les switches */
        .switch-icon {
            font-size: 1.3em;
            margin-right: 10px;
            width: 30px;
            display: inline-block;
            text-align: center;
        }
        
        /* Formulaires compacts - TOUS les types d'inputs */
        .compact-form input[type="number"],
        .compact-form input[type="text"],
        .compact-form input[type="email"],
        .compact-form select {
            padding: 6px 10px !important;
            margin: 3px 0 !important;
            font-size: 0.9em !important;
            width: 100% !important;
            display: block !important;
            box-sizing: border-box !important;
            line-height: 1.2 !important;
            background: white !important;
            border: 1px solid #ccc !important;
            border-radius: 4px !important;
        }
        
        .compact-form input:focus {
            border-color: #008B74 !important;
            outline: none !important;
        }
        
        .compact-form label {
            font-size: 0.9em !important;
            margin-bottom: 2px !important;
            display: block !important;
        }
        
        /* Fix pour les divs inline qui causent des problèmes */
        .control-grid div[style*="display: grid"],
        .control-grid div[style*="display: flex"] {
            min-height: 1px !important;
            overflow: visible !important;
        }
        
        /* Grilles de paramètres */
        .param-grid {
            display: grid !important;
            gap: 10px !important;
            width: 100% !important;
        }
        
        .param-grid-2 {
            grid-template-columns: 1fr 1fr !important;
        }
        
        .param-grid-3 {
            grid-template-columns: 1fr 1fr 1fr !important;
        }
        
        .param-box {
            background: #f8f9fa !important;
            padding: 15px !important;
            border-radius: 6px !important;
            margin-bottom: 15px !important;
            display: block !important;
            overflow: visible !important;
        }
        
        .param-box h4 {
            margin-top: 0 !important;
            color: #008B74 !important;
            font-size: 0.95em !important;
            margin-bottom: 10px !important;
        }
        
        /* Retirer le background des div enfants pour éviter cadres gris emboîtés */
        .param-grid > div {
            background: transparent !important;
        }
        
        /* Inputs plus larges et lisibles */
        .param-grid input[type="number"] {
            min-width: 60px !important;
            text-align: center !important;
            font-size: 1em !important;
        }
        
        /* Override des styles qui causent problème */
        .control-grid section * {
            max-width: 100% !important;
        }
        
        /* ========================================
           OPTIMISATIONS SUPPLÉMENTAIRES
           ======================================== */
        
        /* Section titre avec meilleure hiérarchie */
        .compact-section h3 {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
        
        /* Param boxes plus compactes et modernes */
        .param-box {
            transition: all 0.2s;
        }
        
        .param-box:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }
        
        /* Inputs et labels avec meilleur espacement */
        .compact-form label {
            display: block;
            font-weight: 500;
            color: #2c3e50;
        }
        
        /* Boutons d'action avec meilleur touch target */
        .compact-form input[type="submit"] {
            transition: all 0.2s;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .compact-form input[type="submit"]:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 139, 116, 0.3);
        }
        
        .compact-form input[type="submit"]:active {
            transform: translateY(0);
        }
        
        /* Responsive amélioré pour section paramètres */
        @media (max-width: 768px) {
            .control-grid {
                display: block !important;
            }
            
            .left-column,
            .right-column {
                width: 100% !important;
                margin-bottom: 1rem;
            }
            
            .compact-section {
                margin-bottom: 1rem !important;
            }
            
            .param-box h4 {
                font-size: 0.95rem !important;
            }
        }
        
        /* Actions rapides responsive */
        @media (max-width: 600px) {
            .control-grid + section > div {
                flex-direction: column !important;
            }
            
            .control-grid + section > div a {
                width: 100% !important;
                text-align: center !important;
            }
        }
    </style>
</head>
<body class="is-preload">

    <!-- Badge de synchronisation temps réel -->
    <div id="control-sync-badge" class="connecting">CONNEXION...</div>
    
    <!-- Wrapper -->
    <div id="wrapper" class="fade-in">
        
        <!-- Header -->
        <header id="header">
            <a href="https://iot.olution.info/index.html" class="logo">n3 iot datas</a>
        </header>

        <!-- Nav -->
        <nav id="nav">
            <ul class="links">
                <li><a href="https://iot.olution.info/index.html">Accueil</a></li>
                <li class="active"><a href="https://iot.olution.info/ffp3/ffp3datas/aquaponie{{ environment == 'test' ? '-test' : '' }}">L'aquaponie (FFP3)</a></li>
                <li><a href="https://iot.olution.info/msp1/msp1datas/msp1-data.php">Le potager</a></li>
                <li><a href="https://iot.olution.info/n3pp/n3ppdatas/n3pp-data.php">L'élevage d'insectes</a></li>
            </ul>
            <ul class="icons">
                <li><a href="https://olution.info/course/view.php?id=511" class="icon solid fa-leaf"><span class="label">olution</span></a></li>
                <li><a href="https://farmflow.marout.org/" class="icon solid fa-fish"><span class="label">farmflow</span></a></li>
            </ul>
        </nav>

        <!-- Main -->
        <div id="main">
            <!-- Featured Post -->
            <article class="post featured">
                <header class="major">
                    <h2>🎛️ Contrôle du FFP3 {% if environment == 'test' %}<span style="color: orange;">(TEST)</span>{% endif %}</h2>
                    <p>Il est possible d'agir à distance sur différents actionneurs du système.</p>
                    <p style="color: #ff6b6b; font-weight: bold;">⚠️ À manipuler avec la plus grande des précautions !</p>
                    
                    {# Dernières requêtes boards #}
                    <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 20px 0;">
                        <h4 style="margin-top: 0;">📡 État des connexions</h4>
                        {% for board in boards %}
                            <p style="margin: 5px 0;"><strong>Board {{ board.board }}:</strong> Dernière requête le {{ board.last_request }}</p>
                        {% endfor %}
                    </div>
                </header>
                
                {# Grid 2 colonnes sur desktop #}
                <div class="control-grid">
                    {# Colonne gauche : Actionneurs #}
                    <div class="left-column">
                        <section class="compact-section" style="background: #fff; padding: 20px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                            <h3 style="color: #008B74; border-bottom: 2px solid #008B74; padding-bottom: 8px; margin-bottom: 15px;">
                                <i class="fas fa-bolt"></i> Actions
                            </h3>
                            
                            {# Préparation des outputs avec icônes - Ajouter GPIO 101 (mailNotif) et 115 (WakeUp) #}
                            {% set physical_outputs = outputs|filter(o => (o.gpio < 100 or o.gpio == 101 or o.gpio == 108 or o.gpio == 109 or o.gpio == 110 or o.gpio == 115) and o.name is not empty) %}
                            
                            <div class="action-buttons-grid">
                                {% for output in physical_outputs %}
                                    {% set clean_name = output.name|replace({
                                        '(stopp&#233;s si relais activ&#233;)': '',
                                        '(stopp&#233;e si relais activ&#233;)': '',
                                        '(stoppés si relais activé)': '',
                                        '(stoppée si relais activé)': '',
                                        ' (stopp&#233;s si relais activ&#233;)': '',
                                        ' (stopp&#233;e si relais activ&#233;)': '',
                                        ' (stoppés si relais activé)': '',
                                        ' (stoppée si relais activé)': ''
                                    })|trim %}
                                    
                                    {# Déterminer l'icône et la couleur selon le GPIO #}
                                    {% set icon = 'fa-circle' %}
                                    {% set color = 'default' %}
                                    {% if output.gpio == 101 %}
                                        {% set icon = 'fa-bell' %}
                                        {% set clean_name = 'Notifications' %}
                                        {% set color = 'purple' %}
                                    {% elseif output.gpio == 115 %}
                                        {% set icon = 'fa-clock' %}
                                        {% set clean_name = 'Forçage réveil' %}
                                        {% set color = 'orange' %}
                                    {% elseif output.gpio == 108 %}
                                        {% set icon = 'fa-fish' %}
                                        {% set clean_name = 'Nourrir petits poissons' %}
                                        {% set color = 'pink' %}
                                    {% elseif output.gpio == 109 %}
                                        {% set icon = 'fa-fish' %}
                                        {% set clean_name = 'Nourrir gros poissons' %}
                                        {% set color = 'pink' %}
                                    {% elseif output.gpio == 110 %}
                                        {% set icon = 'fa-arrows-rotate' %}
                                        {% set clean_name = 'Reset ESP' %}
                                        {% set color = 'red' %}
                                    {% elseif clean_name|lower matches '/pompe aqua/' %}
                                        {% set icon = 'fa-water' %}
                                        {% set color = 'blue' %}
                                    {% elseif clean_name|lower matches '/pompe.*r.*serve/' %}
                                        {% set icon = 'fa-droplet' %}
                                        {% set color = 'cyan' %}
                                    {% elseif clean_name|lower matches '/radiateur/' %}
                                        {% set icon = 'fa-temperature-high' %}
                                        {% set color = 'red' %}
                                    {% elseif clean_name|lower matches '/lumi.*re/' %}
                                        {% set icon = 'fa-lightbulb' %}
                                        {% set color = 'yellow' %}
                                    {% endif %}
                                    
                                    <div class="action-button-card action-button-{{ color }}" data-state="{{ output.state }}">
                                        <div class="action-button-content">
                                            <i class="fas {{ icon }} action-icon-simple" style="color: {{ 
                                                color == 'blue' ? '#2980b9' : 
                                                (color == 'cyan' ? '#00bcd4' : 
                                                (color == 'red' ? '#e74c3c' : 
                                                (color == 'yellow' ? '#f39c12' : 
                                                (color == 'purple' ? '#9b59b6' : 
                                                (color == 'orange' ? '#e67e22' : 
                                                (color == 'pink' ? '#e91e63' : 
                                                (color == 'green' ? '#27ae60' : '#008B74'))))))) 
                                            }};"></i>
                                            <div class="action-button-info">
                                                <div class="action-button-label">{{ clean_name|raw }}</div>
                                                <div class="action-button-status">
                                                    <span class="status-text">{{ output.state == 1 ? 'Activé' : 'Désactivé' }}</span>
                                                </div>
                                            </div>
                                        </div>
                                        <label class="modern-switch">
                                            <input type="checkbox" 
                                                   onchange="updateOutput(this)" 
                                                   id="{{ output.id }}" 
                                                   data-id="{{ output.id }}"
                                                   data-gpio="{{ output.gpio }}"
                                                   {{ output.state == 1 ? 'checked' : '' }}>
                                            <span class="modern-switch-slider">
                                                <span class="modern-switch-button"></span>
                                            </span>
                                        </label>
                                    </div>
                                {% endfor %}
                            </div>
                        </section>
                    </div>
                    
                    {# Colonne droite : Paramètres #}
                    <div class="right-column">
                        <section class="compact-section compact-form" style="background: #fff; padding: 20px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                            <h3 style="color: #008B74; border-bottom: 2px solid #008B74; padding-bottom: 8px; margin-bottom: 15px;">
                                <i class="fas fa-cog"></i> Paramètres du système
                            </h3>
                    
                    {% set params = {} %}
                    {% for output in outputs %}
                        {% if output.gpio == 100 %}{% set params = params|merge({'mail': output.state}) %}{% endif %}
                        {% if output.gpio == 101 %}{% set params = params|merge({'mailNotif': output.state}) %}{% endif %}
                        {% if output.gpio == 102 %}{% set params = params|merge({'aqThr': output.state}) %}{% endif %}
                        {% if output.gpio == 103 %}{% set params = params|merge({'taThr': output.state}) %}{% endif %}
                        {% if output.gpio == 104 %}{% set params = params|merge({'chauff': output.state}) %}{% endif %}
                        {% if output.gpio == 105 %}{% set params = params|merge({'bouffeMat': output.state}) %}{% endif %}
                        {% if output.gpio == 106 %}{% set params = params|merge({'bouffeMid': output.state}) %}{% endif %}
                        {% if output.gpio == 107 %}{% set params = params|merge({'bouffeSoir': output.state}) %}{% endif %}
                        {% if output.gpio == 111 %}{% set params = params|merge({'tempsGros': output.state}) %}{% endif %}
                        {% if output.gpio == 112 %}{% set params = params|merge({'tempsPetits': output.state}) %}{% endif %}
                        {% if output.gpio == 113 %}{% set params = params|merge({'tempsRemplissageSec': output.state}) %}{% endif %}
                        {% if output.gpio == 114 %}{% set params = params|merge({'limFlood': output.state}) %}{% endif %}
                        {% if output.gpio == 115 %}{% set params = params|merge({'WakeUp': output.state}) %}{% endif %}
                        {% if output.gpio == 116 %}{% set params = params|merge({'FreqWakeUp': output.state}) %}{% endif %}
                    {% endfor %}
                    
                            <form onsubmit="return createOutput();">
                                {# Email de notification #}
                                <div class="param-box" style="background: #e8f5e9 !important; margin-bottom: 12px !important; padding: 12px !important;">
                                    <h4><i class="fas fa-envelope"></i> Email de notification</h4>
                                    <input type="email" name="mail" id="mail" value="{{ params.mail|default('') }}" placeholder="email@exemple.com" style="padding: 6px 10px !important; margin: 3px 0 !important; height: auto !important;">
                                </div>
                        
                                {# Gestion de l'eau #}
                                <div class="param-box" style="background: #e3f2fd !important; margin-bottom: 12px !important; padding: 12px !important;">
                                    <h4><i class="fas fa-tint"></i> Gestion de l'eau</h4>
                                    
                                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-bottom: 10px;">
                                        <div>
                                            <label for="aqThr">Aquarium bas (cm)</label>
                                            <input type="number" name="aqThr" min="0" id="aqThr" value="{{ params.aqThr|default(0) }}">
                                        </div>
                                        <div>
                                            <label for="limFlood">Débordement (cm)</label>
                                            <input type="number" name="limFlood" min="0" id="limFlood" value="{{ params.limFlood|default(0) }}">
                                        </div>
                                    </div>
                                    
                                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                                        <div>
                                            <label for="tempsRemplissageSec">Remplissage (s)</label>
                                            <input type="number" name="tempsRemplissageSec" min="0" id="tempsRemplissageSec" value="{{ params.tempsRemplissageSec|default(0) }}">
                                        </div>
                                        <div>
                                            <label for="taThr">Réserve basse (cm)</label>
                                            <input type="number" name="taThr" min="0" id="taThr" value="{{ params.taThr|default(0) }}">
                                        </div>
                                    </div>
                                </div>
                        
                                {# Grille 2 colonnes pour Chauffage et Système #}
                                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px; margin-bottom: 12px;">
                                    {# Chauffage #}
                                    <div class="param-box" style="background: #fff3e0 !important; margin-bottom: 0 !important; padding: 12px !important;">
                                        <h4><i class="fas fa-temperature-half"></i> Chauffage</h4>
                                        <label for="chauff">Température min. (°C)</label>
                                        <input type="number" name="chauff" min="0" step="0.1" id="chauff" value="{{ params.chauff|default(0) }}">
                                    </div>
                        
                                    {# Système #}
                                    <div class="param-box" style="background: #f3e5f5 !important; margin-bottom: 0 !important; padding: 12px !important;">
                                        <h4><i class="fas fa-microchip"></i> Système</h4>
                                        <label for="FreqWakeUp">Fréquence WakeUp (s)</label>
                                        <input type="number" name="FreqWakeUp" min="0" id="FreqWakeUp" value="{{ params.FreqWakeUp|default(0) }}">
                                    </div>
                                </div>
                        
                                {# Nourrissage #}
                                <div class="param-box" style="background: #fff9c4 !important; margin-bottom: 12px !important; padding: 12px !important;">
                                    <h4><i class="fas fa-bowl-food"></i> Nourrissage automatique</h4>
                                    
                                    <p style="margin: 8px 0 5px 0; font-weight: 500; font-size: 0.9em;">Horaires (heure 0-23)</p>
                                    <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 10px;">
                                        <div>
                                            <label for="bouffeMat">Matin</label>
                                            <input type="number" name="bouffeMat" min="0" max="23" id="bouffeMat" value="{{ params.bouffeMat|default(0) }}" style="width: 100%; font-size: 1em !important; padding: 6px 10px !important;">
                                        </div>
                                        <div>
                                            <label for="bouffeMid">Midi</label>
                                            <input type="number" name="bouffeMid" min="0" max="23" id="bouffeMid" value="{{ params.bouffeMid|default(0) }}" style="width: 100%; font-size: 1em !important; padding: 6px 10px !important;">
                                        </div>
                                        <div>
                                            <label for="bouffeSoir">Soir</label>
                                            <input type="number" name="bouffeSoir" min="0" max="23" id="bouffeSoir" value="{{ params.bouffeSoir|default(0) }}" style="width: 100%; font-size: 1em !important; padding: 6px 10px !important;">
                                        </div>
                                    </div>
                                    
                                    <p style="margin: 15px 0 5px 0; font-weight: 500; font-size: 0.9em;">Durées (secondes)</p>
                                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                                        <div>
                                            <label for="tempsGros">Gros poissons</label>
                                            <input type="number" name="tempsGros" min="0" id="tempsGros" value="{{ params.tempsGros|default(0) }}" style="width: 100%; font-size: 1em !important; padding: 6px 10px !important;">
                                        </div>
                                        <div>
                                            <label for="tempsPetits">Petits poissons</label>
                                            <input type="number" name="tempsPetits" min="0" id="tempsPetits" value="{{ params.tempsPetits|default(0) }}" style="width: 100%; font-size: 1em !important; padding: 6px 10px !important;">
                                        </div>
                                    </div>
                                </div>
                                
                                <div style="text-align: center;">
                                    <input type="submit" value="💾 Enregistrer" style="width: 100%; font-size: 1em; padding: 14px 20px; line-height: 1; vertical-align: middle;">
                                </div>
                            </form>
                        </section>
                    </div>
                </div>
                
                {# Section Actions rapides (compacte) #}
                <section style="background: #fff; padding: 15px; border-radius: 8px; margin-bottom: 15px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); text-align: center;">
                    <div style="display: flex; gap: 10px; justify-content: center; flex-wrap: wrap; align-items: center;">
                        <a href="/ffp3/cronpompe.php" style="margin: 0; padding: 8px 16px; font-size: 0.9em; background: #008B74; color: white; border-radius: 4px; text-decoration: none; display: inline-flex; align-items: center; gap: 6px;"><i class="fas fa-gears"></i> Cron manuel</a>
                        <a href="/ffp3/cronlog.txt" style="margin: 0; padding: 8px 16px; font-size: 0.9em; background: #008B74; color: white; border-radius: 4px; text-decoration: none; display: inline-flex; align-items: center; gap: 6px;"><i class="fas fa-file-lines"></i> Journal du cron</a>
                        <a href="/ffp3/aquaponie{{ environment == 'test' ? '-test' : '' }}" style="margin: 0; padding: 8px 16px; font-size: 0.9em; background: #008B74; color: white; border-radius: 4px; text-decoration: none; display: inline-flex; align-items: center; gap: 6px;"><i class="fas fa-chart-line"></i> Retour aux données</a>
                    </div>
                </section>
            </article>
        </div>
        
        <!-- Footer avec version -->
        <footer id="footer" style="text-align: center; padding: 20px 0; color: #999; font-size: 0.9em;">
            <p>{{ version }} | Système d'aquaponie FFP3 | © 2025 olution</p>
        </footer>
    </div>

<script>
    const API_BASE = '/ffp3/api/outputs{{ environment == "test" ? "-test" : "" }}';
    let controlSync = null; // Instance globale de synchronisation
    
    function updateOutput(element) {
        var id = element.getAttribute('data-id');
        var gpio = element.getAttribute('data-gpio');
        var state = element.checked ? 1 : 0;
        var url = API_BASE + "/toggle?id=" + id + "&state=" + state;
        
        // Trouver la carte parent pour mettre à jour son état visuel
        var card = element.closest('.action-button-card');
        var statusText = card ? card.querySelector('.status-text') : null;
        
        console.log("Toggle ID " + id + " (GPIO " + gpio + ") to state " + state);
        console.log("URL: " + url);
        
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function() {
            if (this.readyState === XMLHttpRequest.DONE) {
                console.log("Response status: " + this.status);
                console.log("Response: " + this.responseText);
                if (this.status === 200) {
                    // Succès - Mettre à jour l'état visuel immédiatement
                    if (card) {
                        card.setAttribute('data-state', state);
                        // Animation de transition
                        card.style.transition = 'all 0.3s ease';
                    }
                    if (statusText) {
                        statusText.textContent = state === 1 ? 'Activé' : 'Désactivé';
                        statusText.style.color = state === 1 ? '#27ae60' : '#7f8c8d';
                        statusText.style.fontWeight = state === 1 ? '600' : '400';
                    }
                    
                    // Forcer une synchronisation immédiate
                    if (controlSync) {
                        setTimeout(() => controlSync.forceSync(), 500);
                    }
                } else {
                    console.error("Toggle failed!");
                    alert("Erreur lors du changement d'état (ID " + id + ")");
                    // Revenir à l'état précédent en cas d'erreur
                    element.checked = !element.checked;
                }
            }
        };
        xhr.open("GET", url, true);
        xhr.send();
    }

    function createOutput() {
        var xhr = new XMLHttpRequest();
        xhr.open("POST", API_BASE + "/parameters", true);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");

        xhr.onreadystatechange = function() {
            if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
                alert("Changement pris en compte");
                // Délai de 1,5 secondes pour s'assurer que la BDD est bien à jour
                setTimeout(function(){ window.location.reload(true); }, 1500);
            }
            else if (this.readyState === XMLHttpRequest.DONE) {
                alert("Changement non pris en compte !");
            }
        }
        
        var mail = document.getElementById("mail").value;
        var aqThr = document.getElementById("aqThr").value;
        var taThr = document.getElementById("taThr").value;
        var tempsRemplissageSec = document.getElementById("tempsRemplissageSec").value;
        var limFlood = document.getElementById("limFlood").value;
        var chauff = document.getElementById("chauff").value;
        var bouffeMat = document.getElementById("bouffeMat").value;
        var bouffeMid = document.getElementById("bouffeMid").value;
        var bouffeSoir = document.getElementById("bouffeSoir").value;
        var tempsGros = document.getElementById("tempsGros").value;
        var tempsPetits = document.getElementById("tempsPetits").value;
        var FreqWakeUp = document.getElementById("FreqWakeUp").value;

        // Note: mailNotif (GPIO 101) et WakeUp (GPIO 115) sont maintenant gérés par les switches de la section Actions
        var httpRequestData = "mail="+mail+"&aqThr="+aqThr+"&tempsRemplissageSec="+tempsRemplissageSec+"&limFlood="+limFlood+"&taThr="+taThr+"&chauff="+chauff+"&bouffeMat="+bouffeMat+"&bouffeMid="+bouffeMid+"&bouffeSoir="+bouffeSoir+"&tempsGros="+tempsGros+"&tempsPetits="+tempsPetits+"&FreqWakeUp="+FreqWakeUp;
        xhr.send(httpRequestData);
        
        return false; // Empêcher la soumission normale du formulaire
    }
    
    // ====================================================================
    // Vérification APPROFONDIE du chargement de Font Awesome
    // ====================================================================
    async function checkFontAwesomeLoaded() {
        console.log('[Control] 🔍 Diagnostic Font Awesome démarré...');
        
        // Test 1 : Vérifier que la police est déclarée
        const testIcon = document.createElement('i');
        testIcon.className = 'fas fa-check';
        testIcon.style.cssText = 'position: absolute; left: -9999px; font-family: "Font Awesome 6 Free"; font-weight: 900;';
        document.body.appendChild(testIcon);
        
        const computedFont = window.getComputedStyle(testIcon).fontFamily;
        const fontDeclared = computedFont.includes('Font Awesome') || computedFont.includes('FontAwesome');
        console.log('[Control] Test 1 - Font Family:', computedFont, fontDeclared ? '✅' : '❌');
        
        // Test 2 : Vérifier le pseudo-élément ::before (CRITIQUE)
        const beforeStyle = window.getComputedStyle(testIcon, '::before');
        const beforeFont = beforeStyle.fontFamily;
        const beforeContent = beforeStyle.content;
        const beforeValid = (beforeFont.includes('Font Awesome') || beforeFont.includes('FontAwesome')) && beforeContent !== 'none';
        console.log('[Control] Test 2 - ::before Font:', beforeFont, '| Content:', beforeContent, beforeValid ? '✅' : '❌');
        
        document.body.removeChild(testIcon);
        
        // Test 3 : Vérifier le chargement de la police WOFF2 via Font Loading API
        let fontLoaded = false;
        if (document.fonts && document.fonts.check) {
            try {
                fontLoaded = document.fonts.check('900 1em "Font Awesome 6 Free"');
                console.log('[Control] Test 3 - WOFF2 chargé:', fontLoaded ? '✅' : '⏳ En cours...');
                
                // Attendre le chargement complet
                if (!fontLoaded) {
                    await document.fonts.ready;
                    fontLoaded = document.fonts.check('900 1em "Font Awesome 6 Free"');
                    console.log('[Control] Test 3 - WOFF2 après attente:', fontLoaded ? '✅' : '❌');
                }
            } catch (e) {
                console.warn('[Control] Test 3 - Font Loading API non disponible:', e);
            }
        }
        
        // Diagnostic complet
        const allOk = fontDeclared && beforeValid;
        
        if (!allOk) {
            console.error('[Control] ❌ PROBLÈME DÉTECTÉ avec Font Awesome!');
            console.error('[Control] - Font déclarée:', fontDeclared ? 'OUI' : 'NON');
            console.error('[Control] - Pseudo ::before:', beforeValid ? 'OK' : 'PROBLÈME');
            console.error('[Control] - Police WOFF2:', fontLoaded ? 'CHARGÉE' : 'NON CHARGÉE');
            
            // Afficher un message d'erreur détaillé
            const errorDiv = document.createElement('div');
            errorDiv.id = 'fa-error-notice';
            errorDiv.style.cssText = 'position: fixed; top: 60px; right: 20px; background: #e74c3c; color: white; padding: 15px; border-radius: 8px; z-index: 10000; max-width: 350px; box-shadow: 0 4px 12px rgba(0,0,0,0.3); font-size: 0.9em;';
            
            let errorMsg = '<strong>⚠️ Icônes Font Awesome</strong><br>';
            if (!fontDeclared) {
                errorMsg += '❌ Police non déclarée<br>';
            }
            if (!beforeValid) {
                errorMsg += '❌ Pseudo-élément ::before incorrect<br>';
            }
            if (!fontLoaded) {
                errorMsg += '⏳ Police WOFF2 en chargement...<br>';
            }
            errorMsg += '<small>Vérifiez la console (F12) pour détails</small>';
            
            errorDiv.innerHTML = errorMsg;
            document.body.appendChild(errorDiv);
            
            // Retirer après 12 secondes
            setTimeout(() => {
                const notice = document.getElementById('fa-error-notice');
                if (notice) notice.remove();
            }, 12000);
        } else {
            console.log('[Control] ✅ Font Awesome complètement opérationnel!');
        }
        
        return allOk;
    }
    
    // ====================================================================
    // Initialisation de la synchronisation temps réel au chargement
    // ====================================================================
    document.addEventListener('DOMContentLoaded', function() {
        // Vérifier le chargement de Font Awesome après un court délai
        setTimeout(checkFontAwesomeLoaded, 500);
        // Initialiser ControlValuesUpdater
        const controlValuesUpdater = new ControlValuesUpdater();
        controlValuesUpdater.init();
        window.controlValuesUpdater = controlValuesUpdater;
        
        // Charger le script de synchronisation
        const syncScript = document.createElement('script');
        syncScript.src = '/ffp3/assets/js/control-sync.js';
        syncScript.onload = function() {
            console.log('[Control] Initializing real-time sync...');
            
            // Créer l'instance de synchronisation
            controlSync = new ControlSync({
                apiBase: API_BASE,
                pollInterval: 10, // 10 secondes
                maxRetries: 5,
                
                // Callback quand des états changent
                onStateChange: function(changes) {
                    console.log('[Control] State changes detected:', changes);
                    
                    // Mettre à jour les paramètres affichés si nécessaire
                    if (window.controlValuesUpdater) {
                        changes.forEach(change => {
                            // Pour les GPIOs de paramètres (> 100), mettre à jour l'affichage
                            if (change.gpio >= 100) {
                                controlValuesUpdater.updateParameterDisplay(change.gpio, change.newState);
                            }
                        });
                    }
                },
                
                // Callback quand le statut change
                onStatusChange: function(status) {
                    console.log('[Control] Sync status:', status);
                }
            });
            
            // Initialiser les états depuis le DOM
            controlSync.initializeFromDOM();
            
            // Démarrer la synchronisation
            controlSync.start();
            
            console.log('[Control] Real-time sync started (polling every 10s)');
        };
        
        syncScript.onerror = function() {
            console.error('[Control] Failed to load control-sync.js');
        };
        
        document.head.appendChild(syncScript);
    });
</script>

<!-- Scripts -->
<script src="https://iot.olution.info/assets/js/jquery.min.js"></script>
<script src="https://iot.olution.info/assets/js/jquery.scrollex.min.js"></script>
<script src="https://iot.olution.info/assets/js/jquery.scrolly.min.js"></script>
<script src="https://iot.olution.info/assets/js/browser.min.js"></script>
<script src="https://iot.olution.info/assets/js/breakpoints.min.js"></script>
<script src="https://iot.olution.info/assets/js/util.js"></script>
<script src="https://iot.olution.info/assets/js/main.js"></script>

<!-- Module de mise à jour des valeurs affichées -->
<script src="/ffp3/assets/js/control-values-updater.js"></script>
</body>
</html>