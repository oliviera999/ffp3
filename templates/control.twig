<!DOCTYPE html>
<html>
<head>
    <title>olution iot datas</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
    <meta name="theme-color" content="#008B74" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
    <link rel="stylesheet" href="/assets/css/main.css" />
    <noscript><link rel="stylesheet" href="/assets/css/noscript.css" /></noscript>
    
    <!-- Font Awesome avec préchargement et solution de repli SVG -->
    <link rel="preload" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/webfonts/fa-solid-900.woff2" as="font" type="font/woff2" crossorigin>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/js/all.min.js" integrity="sha512-GWzVrcGlo0TxTRvz9ttioyYJ+Wwk9Ck0G81D+eO63BaqHaJ3YZX9wuqjwgfcV/MrB2PhaVX9DkYVhbFpStnqpQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    
    <!-- Styles harmonisés avec l'interface aquaponie -->
    <link rel="stylesheet" href="/ffp3/assets/css/realtime-styles.css" />
    <link rel="manifest" href="/ffp3/manifest.json" />
    <link rel="apple-touch-icon" href="/ffp3/assets/icons/icon-192.png" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <link rel="shortcut icon" type="image/png" href="https://iot.olution.info/images/favico.png"/>
    
    <style>
        /* ========================================
           STYLES HARMONISÉS AVEC L'INTERFACE AQUAPONIE
           ======================================== */
        
        /* Reset et base */
        * {
            box-sizing: border-box;
        }
        
        /* Banner d'informations système (cohérent avec aquaponie) */
        .system-info-banner {
            background: linear-gradient(135deg, #008B74, #00A896);
            color: white;
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 25px;
            box-shadow: 0 4px 15px rgba(0, 139, 116, 0.3);
        }
        
        .system-info-banner h3 {
            margin: 0 0 10px 0;
            font-size: 1.3em;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .system-info-banner p {
            margin: 5px 0;
            font-size: 0.95em;
            opacity: 0.95;
        }
        
        /* Section header harmonisé */
        .section-header {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 2px solid #008B74;
        }
        
        .section-header i {
            font-size: 1.4em;
            color: #008B74;
        }
        
        .section-header h2 {
            margin: 0;
            color: #2c3e50;
            font-size: 1.5em;
        }
        
        /* Grille de contrôle harmonisée */
        .control-grid-harmonized {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 25px;
            margin-bottom: 30px;
        }
        
        /* Cartes de contrôle harmonisées */
        .control-card {
            background: white;
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            border: 1px solid #e8e8e8;
            transition: all 0.3s ease;
        }
        
        .control-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
        }
        
        .control-card h3 {
            margin: 0 0 20px 0;
            color: #008B74;
            font-size: 1.2em;
            display: flex;
            align-items: center;
            gap: 10px;
            padding-bottom: 10px;
            border-bottom: 2px solid #f0f0f0;
        }
        
        /* Boutons d'action harmonisés */
        .action-buttons-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(min(100%, 280px), 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }
        
        .action-button-card {
            background: white;
            border-radius: 10px;
            padding: 15px;
            border: 2px solid #e8e8e8;
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .action-button-card:hover {
            border-color: #ccc;
            background: #f8f9fa;
            transform: translateY(-1px);
        }
        
        .action-button-card[data-state="1"] {
            border-color: currentColor;
            background: #f0f8f7;
            box-shadow: 0 2px 8px rgba(0, 139, 116, 0.2);
        }
        
        .action-button-content {
            display: flex;
            align-items: center;
            gap: 12px;
            flex: 1;
        }
        
        .action-icon-simple {
            font-size: 1.8rem;
            flex-shrink: 0;
            transition: transform 0.3s;
        }
        
        .action-button-card:hover .action-icon-simple {
            transform: scale(1.1);
        }
        
        .action-button-info {
            flex: 1;
        }
        
        .action-button-label {
            font-weight: 600;
            font-size: 0.95rem;
            color: #2c3e50;
            margin-bottom: 4px;
            line-height: 1.3;
        }
        
        .action-button-status {
            font-size: 0.8rem;
            color: #7f8c8d;
            font-weight: 500;
            transition: all 0.3s;
        }
        
        .action-button-card[data-state="1"] .action-button-status {
            color: currentColor;
            font-weight: 600;
        }
        
        /* Switch moderne harmonisé */
        .modern-switch {
            position: relative;
            display: inline-block;
            width: 52px;
            height: 28px;
            flex-shrink: 0;
            cursor: pointer;
        }
        
        .modern-switch input {
            opacity: 0;
            width: 0;
            height: 0;
            position: absolute;
        }
        
        .modern-switch-slider {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(145deg, #d0d7de, #e5e9ed);
            border-radius: 32px;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .modern-switch-button {
            position: absolute;
            content: '';
            height: 22px;
            width: 22px;
            left: 3px;
            bottom: 3px;
            background: white;
            border-radius: 50%;
            transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 3px 8px rgba(0, 0, 0, 0.25);
        }
        
        .modern-switch input:checked + .modern-switch-slider {
            background: currentColor;
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.2),
                        0 0 16px currentColor;
        }
        
        .modern-switch input:checked + .modern-switch-slider .modern-switch-button {
            transform: translateX(24px);
            box-shadow: 0 3px 12px rgba(0, 0, 0, 0.3);
        }
        
        /* Couleurs harmonisées par type */
        .action-button-blue { color: #2980b9; }
        .action-button-cyan { color: #00bcd4; }
        .action-button-red { color: #e74c3c; }
        .action-button-yellow { color: #f39c12; }
        .action-button-purple { color: #9b59b6; }
        .action-button-orange { color: #e67e22; }
        .action-button-pink { color: #e91e63; }
        .action-button-green { color: #27ae60; }
        .action-button-default { color: #008B74; }
        
        /* Paramètres harmonisés */
        .param-box {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
            border: 1px solid #e8e8e8;
            transition: all 0.3s ease;
        }
        
        .param-box:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        
        .param-box h4 {
            margin: 0 0 15px 0;
            color: #008B74;
            font-size: 1.1em;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .param-grid {
            display: grid;
            gap: 15px;
        }
        
        .param-grid-2 {
            grid-template-columns: 1fr 1fr;
        }
        
        .param-grid-3 {
            grid-template-columns: 1fr 1fr 1fr;
        }
        
        .compact-form input[type="number"],
        .compact-form input[type="text"],
        .compact-form input[type="email"],
        .compact-form select {
            padding: 10px 12px;
            margin: 5px 0;
            font-size: 0.95em;
            width: 100%;
            border: 2px solid #e8e8e8;
            border-radius: 8px;
            background: white;
            transition: all 0.3s ease;
        }
        
        .compact-form input:focus {
            border-color: #008B74;
            outline: none;
            box-shadow: 0 0 0 3px rgba(0, 139, 116, 0.1);
        }
        
        .compact-form label {
            font-size: 0.9em;
            margin-bottom: 5px;
            display: block;
            font-weight: 500;
            color: #2c3e50;
        }
        
        /* Badge de synchronisation harmonisé */
        #control-sync-badge {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            padding: 10px 18px;
            border-radius: 25px;
            font-size: 0.8em;
            font-weight: bold;
            letter-spacing: 0.5px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            transition: all 0.3s ease;
            cursor: default;
        }
        
        #control-sync-badge.connecting {
            background: linear-gradient(135deg, #ffa726, #fb8c00);
            color: white;
            animation: pulse 1.5s ease-in-out infinite;
        }
        
        #control-sync-badge.online {
            background: linear-gradient(135deg, #66bb6a, #43a047);
            color: white;
        }
        
        #control-sync-badge.offline {
            background: linear-gradient(135deg, #bdbdbd, #9e9e9e);
            color: white;
        }
        
        #control-sync-badge.error {
            background: linear-gradient(135deg, #ef5350, #e53935);
            color: white;
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 1; transform: scale(1); }
            50% { opacity: 0.8; transform: scale(1.05); }
        }
        
        /* Section actions rapides harmonisée */
        .actions-section {
            background: white;
            padding: 25px;
            border-radius: 12px;
            margin-bottom: 25px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            text-align: center;
        }
        
        .actions-grid {
            display: flex;
            gap: 15px;
            justify-content: center;
            flex-wrap: wrap;
            align-items: center;
        }
        
        .action-link {
            padding: 12px 20px;
            font-size: 0.95em;
            background: linear-gradient(135deg, #008B74, #00A896);
            color: white;
            border-radius: 8px;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
            font-weight: 500;
        }
        
        .action-link:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(0, 139, 116, 0.3);
            color: white;
        }
        
        /* Responsive harmonisé */
        @media (max-width: 1024px) {
            .control-grid-harmonized {
                grid-template-columns: 1fr;
                gap: 20px;
            }
            
            .action-buttons-grid {
                grid-template-columns: repeat(auto-fit, minmax(min(100%, 260px), 1fr));
            }
        }
        
        @media (max-width: 768px) {
            .control-grid-harmonized {
                grid-template-columns: 1fr;
                gap: 15px;
            }
            
            .action-buttons-grid {
                grid-template-columns: 1fr;
            }
            
            .control-card {
                padding: 20px;
            }
            
            .param-grid-2,
            .param-grid-3 {
                grid-template-columns: 1fr;
            }
            
            .actions-grid {
                flex-direction: column;
            }
            
            .action-link {
                width: 100%;
                justify-content: center;
            }
            
            #control-sync-badge {
                top: 10px;
                right: 10px;
                padding: 8px 14px;
                font-size: 0.75em;
            }
        }
        
        @media (max-width: 400px) {
            .control-card {
                padding: 15px;
            }
            
            .action-button-card {
                padding: 12px;
            }
            
            .modern-switch {
                width: 48px;
                height: 26px;
            }
            
            .modern-switch-button {
                height: 20px;
                width: 20px;
                left: 3px;
                bottom: 3px;
            }
            
            .modern-switch input:checked + .modern-switch-slider .modern-switch-button {
                transform: translateX(22px);
            }
        }
        
        /* Animation de changement d'état */
        .state-changed {
            animation: stateFlash 1s ease-out;
        }
        
        @keyframes stateFlash {
            0% { background-color: #fff3cd; }
            50% { background-color: #ffc107; }
            100% { background-color: #f8f9fa; }
        }
        
        /* ========================================
           STYLES POUR LE PANNEAU D'ÉTAT DU SYSTÈME
           ======================================== */
        
        /* Panneau d'état du système (temps réel) */
        .system-health-panel {
            background: white;
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 25px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            border: 1px solid #e8e8e8;
            transition: all 0.3s ease;
        }
        
        .system-health-panel:hover {
            transform: translateY(-1px);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
        }
        
        .system-health-panel h3 {
            margin: 0 0 20px 0;
            color: #008B74;
            font-size: 1.3em;
            display: flex;
            align-items: center;
            gap: 10px;
            padding-bottom: 10px;
            border-bottom: 2px solid #f0f0f0;
        }
        
        .refresh-spinner {
            margin-left: auto;
            color: #7f8c8d;
            font-size: 0.9em;
        }
        
        .refresh-spinner.spinning i {
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }
        
        /* Grille de santé */
        .health-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }
        
        .health-item {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            border-left: 4px solid #008B74;
            transition: all 0.3s ease;
        }
        
        .health-item:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0, 139, 116, 0.2);
        }
        
        .health-item-label {
            font-size: 0.85em;
            color: #7f8c8d;
            margin-bottom: 8px;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .health-item-value {
            font-size: 1.1em;
            color: #2c3e50;
            font-weight: 600;
        }
        
        /* Indicateurs de statut */
        .status-indicator {
            display: inline-flex;
            align-items: center;
            gap: 6px;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.85em;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .status-indicator.status-online {
            background: linear-gradient(135deg, #66bb6a, #43a047);
            color: white;
        }
        
        .status-indicator.status-offline {
            background: linear-gradient(135deg, #bdbdbd, #9e9e9e);
            color: white;
        }
        
        .status-indicator.status-warning {
            background: linear-gradient(135deg, #ffa726, #fb8c00);
            color: white;
        }
        
        .status-indicator.status-error {
            background: linear-gradient(135deg, #ef5350, #e53935);
            color: white;
        }
        
        /* Compteur de mise à jour */
        .next-update-countdown {
            text-align: center;
            padding: 15px;
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            border-radius: 8px;
            color: #495057;
            font-size: 0.9em;
            border: 1px solid #dee2e6;
        }
        
        .next-update-countdown strong {
            color: #008B74;
            font-weight: 700;
        }
        
        /* Contrôles mode live */
        .live-controls-integrated {
            margin-top: 20px;
            padding-top: 20px;
            border-top: 2px solid #f0f0f0;
        }
        
        .live-control-row {
            display: flex;
            gap: 20px;
            align-items: center;
            justify-content: center;
            flex-wrap: wrap;
        }
        
        .live-control-item {
            display: flex;
            align-items: center;
            gap: 8px;
            background: #f8f9fa;
            padding: 10px 15px;
            border-radius: 8px;
            border: 1px solid #e8e8e8;
            transition: all 0.3s ease;
        }
        
        .live-control-item:hover {
            background: #e9ecef;
            border-color: #008B74;
        }
        
        .live-control-label {
            font-size: 0.9em;
            font-weight: 500;
            color: #495057;
            white-space: nowrap;
        }
        
        /* Switch live */
        .live-toggle-switch {
            position: relative;
            display: inline-block;
            width: 44px;
            height: 24px;
            cursor: pointer;
        }
        
        .live-toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
            position: absolute;
        }
        
        .live-toggle-slider {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: #ddd;
            border-radius: 24px;
            transition: all 0.3s ease;
        }
        
        .live-toggle-button {
            position: absolute;
            content: '';
            height: 18px;
            width: 18px;
            left: 3px;
            bottom: 3px;
            background: white;
            border-radius: 50%;
            transition: all 0.3s ease;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }
        
        .live-toggle-switch input:checked + .live-toggle-slider {
            background: #008B74;
        }
        
        .live-toggle-switch input:checked + .live-toggle-slider .live-toggle-button {
            transform: translateX(20px);
        }
        
        /* Sélecteur de fréquence */
        .live-control-select {
            padding: 6px 10px;
            border: 1px solid #ddd;
            border-radius: 6px;
            background: white;
            font-size: 0.85em;
            color: #495057;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .live-control-select:focus {
            outline: none;
            border-color: #008B74;
            box-shadow: 0 0 0 2px rgba(0, 139, 116, 0.1);
        }
        
        /* Bouton de sync manuel */
        .live-control-btn {
            padding: 8px 12px;
            background: linear-gradient(135deg, #008B74, #00A896);
            color: white;
            border: none;
            border-radius: 6px;
            font-size: 0.85em;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 6px;
        }
        
        .live-control-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 139, 116, 0.3);
        }
        
        .live-control-btn:active {
            transform: translateY(0);
        }
        
         /* ========================================
            STYLES POUR LE PANNEAU DE LOGS TEMPS RÉEL
            ======================================== */
         
         /* Panneau de logs */
         .realtime-logs-panel {
             background: white;
             border-radius: 12px;
             padding: 25px;
             margin-bottom: 25px;
             box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
             border: 1px solid #e8e8e8;
             transition: all 0.3s ease;
         }
         
         .realtime-logs-panel:hover {
             transform: translateY(-1px);
             box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);
         }
         
         .realtime-logs-panel h3 {
             margin: 0 0 20px 0;
             color: #008B74;
             font-size: 1.3em;
             display: flex;
             align-items: center;
             gap: 10px;
             padding-bottom: 10px;
             border-bottom: 2px solid #f0f0f0;
         }
         
         /* Conteneur de logs */
         .logs-container {
             background: #1a1a1a;
             border-radius: 8px;
             padding: 15px;
             font-family: 'Courier New', monospace;
             font-size: 0.85em;
             line-height: 1.4;
             max-height: 400px;
             overflow-y: auto;
             border: 1px solid #333;
             position: relative;
         }
         
         .logs-container::-webkit-scrollbar {
             width: 8px;
         }
         
         .logs-container::-webkit-scrollbar-track {
             background: #2a2a2a;
             border-radius: 4px;
         }
         
         .logs-container::-webkit-scrollbar-thumb {
             background: #555;
             border-radius: 4px;
         }
         
         .logs-container::-webkit-scrollbar-thumb:hover {
             background: #777;
         }
         
         /* Entrées de log */
         .log-entry {
             margin-bottom: 8px;
             padding: 6px 10px;
             border-radius: 4px;
             border-left: 3px solid transparent;
             transition: all 0.2s ease;
             word-wrap: break-word;
         }
         
         .log-entry:hover {
             background: rgba(255, 255, 255, 0.05);
         }
         
         .log-entry.log-info {
             color: #e8e8e8;
             border-left-color: #008B74;
         }
         
         .log-entry.log-success {
             color: #a8e6a3;
             border-left-color: #4caf50;
         }
         
         .log-entry.log-warning {
             color: #ffd54f;
             border-left-color: #ff9800;
         }
         
         .log-entry.log-error {
             color: #ffcdd2;
             border-left-color: #f44336;
         }
         
         .log-entry.log-debug {
             color: #bbdefb;
             border-left-color: #2196f3;
         }
         
         .log-entry.log-gpio {
             color: #f8bbd9;
             border-left-color: #e91e63;
         }
         
         .log-entry.log-sync {
             color: #c8e6c9;
             border-left-color: #4caf50;
         }
         
         /* Timestamp des logs */
         .log-timestamp {
             color: #888;
             font-size: 0.75em;
             margin-right: 10px;
             display: inline-block;
             min-width: 70px;
         }
         
         /* Niveau de log */
         .log-level {
             font-weight: bold;
             margin-right: 10px;
             display: inline-block;
             min-width: 60px;
             text-transform: uppercase;
             font-size: 0.8em;
         }
         
         .log-level.info { color: #008B74; }
         .log-level.success { color: #4caf50; }
         .log-level.warning { color: #ff9800; }
         .log-level.error { color: #f44336; }
         .log-level.debug { color: #2196f3; }
         .log-level.gpio { color: #e91e63; }
         .log-level.sync { color: #4caf50; }
         
         /* Message de log */
         .log-message {
             flex: 1;
             color: inherit;
         }
         
         /* Contrôles des logs */
         .logs-controls {
             display: flex;
             gap: 15px;
             align-items: center;
             margin-bottom: 15px;
             flex-wrap: wrap;
         }
         
         .logs-control-item {
             display: flex;
             align-items: center;
             gap: 8px;
         }
         
         .logs-control-label {
             font-size: 0.9em;
             font-weight: 500;
             color: #495057;
         }
         
         /* Filtres de logs */
         .log-filter-checkbox {
             margin-right: 8px;
         }
         
         .log-filter-checkbox:checked + label {
             color: #008B74;
             font-weight: 600;
         }
         
         /* Boutons de contrôle */
         .logs-btn {
             padding: 6px 12px;
             background: linear-gradient(135deg, #008B74, #00A896);
             color: white;
             border: none;
             border-radius: 6px;
             font-size: 0.8em;
             font-weight: 500;
             cursor: pointer;
             transition: all 0.3s ease;
             display: flex;
             align-items: center;
             gap: 4px;
         }
         
         .logs-btn:hover {
             transform: translateY(-1px);
             box-shadow: 0 3px 8px rgba(0, 139, 116, 0.3);
         }
         
         .logs-btn.secondary {
             background: linear-gradient(135deg, #6c757d, #5a6268);
         }
         
         .logs-btn.danger {
             background: linear-gradient(135deg, #dc3545, #c82333);
         }
         
         /* Indicateur de statut des logs */
         .logs-status {
             display: inline-flex;
             align-items: center;
             gap: 6px;
             padding: 4px 8px;
             border-radius: 12px;
             font-size: 0.75em;
             font-weight: 600;
             text-transform: uppercase;
             letter-spacing: 0.5px;
         }
         
         .logs-status.active {
             background: linear-gradient(135deg, #4caf50, #43a047);
             color: white;
         }
         
         .logs-status.paused {
             background: linear-gradient(135deg, #ff9800, #f57c00);
             color: white;
         }
         
         /* Animation pour les nouvelles entrées */
         .log-entry.new-entry {
             animation: logEntryAppear 0.5s ease-out;
         }
         
         @keyframes logEntryAppear {
             0% {
                 opacity: 0;
                 transform: translateX(-20px);
             }
             100% {
                 opacity: 1;
                 transform: translateX(0);
             }
         }
         
         /* Responsive pour le panneau de logs */
         @media (max-width: 768px) {
             .logs-controls {
                 flex-direction: column;
                 align-items: stretch;
                 gap: 10px;
             }
             
             .logs-control-item {
                 justify-content: space-between;
             }
             
             .realtime-logs-panel {
                 padding: 20px;
             }
             
             .logs-container {
                 max-height: 300px;
                 font-size: 0.8em;
             }
         }
         
         @media (max-width: 480px) {
             .logs-container {
                 max-height: 250px;
                 padding: 12px;
             }
             
             .log-entry {
                 padding: 4px 8px;
                 font-size: 0.75em;
             }
             
             .log-timestamp {
                 min-width: 60px;
                 font-size: 0.7em;
             }
             
             .log-level {
                 min-width: 50px;
                 font-size: 0.7em;
             }
         }
         
         /* Responsive pour le panneau d'état */
         @media (max-width: 768px) {
             .health-grid {
                 grid-template-columns: 1fr;
                 gap: 15px;
             }
             
             .live-control-row {
                 flex-direction: column;
                 gap: 15px;
             }
             
             .live-control-item {
                 width: 100%;
                 justify-content: space-between;
             }
             
             .system-health-panel {
                 padding: 20px;
             }
         }
         
         @media (max-width: 480px) {
             .health-grid {
                 grid-template-columns: 1fr;
             }
             
             .health-item {
                 padding: 12px;
             }
             
             .live-control-item {
                 padding: 8px 12px;
             }
         }
    </style>
</head>
<body class="is-preload">

    <!-- Badge de synchronisation temps réel -->
    <div id="control-sync-badge" class="connecting">CONNEXION...</div>
    
    <!-- Wrapper -->
    <div id="wrapper" class="fade-in">
        
        <!-- Header -->
        <header id="header">
            <a href="https://iot.olution.info/ffp3/" class="logo">n3 iot datas</a>
        </header>

        <!-- Nav -->
        <nav id="nav">
            <ul class="links">
                <li><a href="https://iot.olution.info/ffp3/">Accueil</a></li>
                <li><a href="https://iot.olution.info/ffp3/aquaponie{{ environment == 'test' ? '-test' : '' }}">L'aquaponie (FFP3)</a></li>
                <li class="active"><a href="https://iot.olution.info/ffp3/control{{ environment == 'test' ? '-test' : '' }}">Contrôle</a></li>
                <li><a href="https://iot.olution.info/msp1/msp1datas/msp1-data.php">Le potager</a></li>
                <li><a href="https://iot.olution.info/n3pp/n3ppdatas/n3pp-data.php">L'élevage d'insectes</a></li>
            </ul>
            <ul class="icons">
                <li><a href="https://olution.info/course/view.php?id=511" class="icon solid fa-leaf"><span class="label">olution</span></a></li>
                <li><a href="https://farmflow.marout.org/" class="icon solid fa-fish"><span class="label">farmflow</span></a></li>
            </ul>
        </nav>

        <!-- Main -->
        <div id="main">
            <!-- Featured Post -->
            <article class="post featured">
                <header class="major">
                    <h1 style="margin-bottom: 20px;">
                        <i class="icon solid fa-sliders-h"></i>
                        Contrôle du Système FFP3
                        {% if environment == 'test' %}<span style="color: orange;">(TEST)</span>{% endif %}
                        <i class="icon solid fa-sliders-h"></i>
                    </h1>
                    <p style="font-size: 1.2em; line-height: 1.6;">
                        Interface de contrôle à distance des actionneurs du système aquaponique.
                        <br>
                        Permet d'agir sur les pompes, le chauffage, l'éclairage et la programmation automatique.
                    </p>
                    <p style="color: #ff6b6b; font-weight: bold; background: #fff3cd; padding: 10px; border-radius: 8px; border-left: 4px solid #ffc107;">
                        ⚠️ À manipuler avec la plus grande des précautions !
                    </p>
                    
                    <hr />
                </header>
                
                <!-- Banner info système harmonisé -->
                <div class="system-info-banner">
                    <h3><i class="fas fa-microchip"></i> Informations système</h3>
                    <p>
                        <strong>Environnement:</strong> {{ environment|upper }} • 
                        <strong>Version:</strong> {{ version }} • 
                        {% if firmware_version %}<strong>Firmware ESP32:</strong> {{ firmware_version }}{% endif %}
                    </p>
                    <p>
                        <i class="fas fa-network-wired"></i> Contrôle temps réel • 
                        <i class="fas fa-microchip"></i> {{ outputs|length }} actionneurs • 
                        <i class="fas fa-server"></i> {{ boards|length }} boards connectées
                    </p>
                </div>

                <!-- Panneau d'état du système (temps réel) -->
                <div class="system-health-panel">
                    <h3>
                        <i class="fas fa-heartbeat"></i>
                        État du système
                        <span class="refresh-spinner" id="health-spinner">
                            <i class="fas fa-sync-alt"></i>
                        </span>
                    </h3>
                    
                    <div class="health-grid">
                        <div class="health-item">
                            <div class="health-item-label">Statut</div>
                            <div id="system-status-indicator" class="status-indicator status-online">
                                <i class="fas fa-check-circle"></i> En ligne
                            </div>
                        </div>
                        
                        <div class="health-item">
                            <div class="health-item-label">Dernière réception</div>
                            <div class="health-item-value" id="last-reading-time">
                                <i class="fas fa-spinner fa-spin"></i>
                            </div>
                        </div>
                        
                        <div class="health-item">
                            <div class="health-item-label">Uptime (30j)</div>
                            <div class="health-item-value" id="system-uptime">
                                <i class="fas fa-spinner fa-spin"></i>
                            </div>
                        </div>
                        
                        <div class="health-item">
                            <div class="health-item-label">Lectures aujourd'hui</div>
                            <div class="health-item-value" id="readings-today">
                                <i class="fas fa-spinner fa-spin"></i>
                            </div>
                        </div>
                    </div>
                    
                    <div class="next-update-countdown" id="next-update-info">
                        Prochaine mise à jour dans <strong id="countdown-seconds">15</strong> secondes
                    </div>

                    <!-- Contrôles mode live intégrés -->
                    <div class="live-controls-integrated">
                        <div class="live-control-row">
                            <!-- Mode Live ON/OFF -->
                            <div class="live-control-item">
                                <span class="live-control-label">Mode Live</span>
                                <label class="live-toggle-switch">
                                    <input type="checkbox" id="live-mode-toggle" checked>
                                    <span class="live-toggle-slider">
                                        <span class="live-toggle-button"></span>
                                    </span>
                                </label>
                            </div>
                            
                            <!-- Fréquence de mise à jour -->
                            <div class="live-control-item">
                                <span class="live-control-label">Fréquence</span>
                                <select id="poll-interval-select" class="live-control-select">
                                    <option value="5">5s</option>
                                    <option value="10" selected>10s</option>
                                    <option value="15">15s</option>
                                    <option value="30">30s</option>
                                    <option value="60">1min</option>
                                </select>
                            </div>
                            
                            <!-- Bouton de synchronisation manuelle -->
                            <div class="live-control-item">
                                <button id="manual-sync-btn" class="live-control-btn">
                                    <i class="fas fa-sync-alt"></i> Sync
                                </button>
                            </div>
                        </div>
                    </div>
                 </div>

                <!-- Panneau de logs temps réel -->
                <div class="realtime-logs-panel">
                    <h3>
                        <i class="fas fa-terminal"></i>
                        Logs temps réel
                        <span class="logs-status active" id="logs-status">
                            <i class="fas fa-circle"></i> Actif
                        </span>
                    </h3>
                    
                    <!-- Contrôles des logs -->
                    <div class="logs-controls">
                        <!-- Filtres de niveau -->
                        <div class="logs-control-item">
                            <span class="logs-control-label">Filtres:</span>
                            <input type="checkbox" class="log-filter-checkbox" id="filter-info" checked>
                            <label for="filter-info">Info</label>
                            <input type="checkbox" class="log-filter-checkbox" id="filter-success" checked>
                            <label for="filter-success">Succès</label>
                            <input type="checkbox" class="log-filter-checkbox" id="filter-warning" checked>
                            <label for="filter-warning">Attention</label>
                            <input type="checkbox" class="log-filter-checkbox" id="filter-error" checked>
                            <label for="filter-error">Erreur</label>
                            <input type="checkbox" class="log-filter-checkbox" id="filter-gpio" checked>
                            <label for="filter-gpio">GPIO</label>
                            <input type="checkbox" class="log-filter-checkbox" id="filter-sync" checked>
                            <label for="filter-sync">Sync</label>
                        </div>
                        
                        <!-- Boutons de contrôle -->
                        <div class="logs-control-item">
                            <button id="pause-logs-btn" class="logs-btn secondary">
                                <i class="fas fa-pause"></i> Pause
                            </button>
                            <button id="clear-logs-btn" class="logs-btn danger">
                                <i class="fas fa-trash"></i> Vider
                            </button>
                            <button id="export-logs-btn" class="logs-btn">
                                <i class="fas fa-download"></i> Exporter
                            </button>
                        </div>
                    </div>
                    
                    <!-- Conteneur des logs -->
                    <div class="logs-container" id="logs-container">
                        <!-- Les logs seront ajoutés dynamiquement ici -->
                    </div>
                </div>

                <!-- État des connexions -->
                <div class="section-header">
                    <i class="fas fa-satellite-dish"></i>
                    <h2>État des connexions</h2>
                </div>
                
                <div class="control-card" style="margin-bottom: 25px;">
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px;">
                        {% for board in boards %}
                            <div style="background: #f8f9fa; padding: 15px; border-radius: 8px; border-left: 4px solid #008B74;">
                                <h4 style="margin: 0 0 8px 0; color: #008B74; font-size: 1em;">
                                    <i class="fas fa-microchip"></i> Board {{ board.board }}
                                </h4>
                                <p style="margin: 0; font-size: 0.9em; color: #666;">
                                    Dernière requête : {{ board.last_request }}
                                </p>
                            </div>
                        {% endfor %}
                    </div>
                </div>

                <!-- Formulaire de contrôle harmonisé -->
                <form onsubmit="return createOutput();">
                    <div class="control-grid-harmonized">
                        
                        <!-- Colonne 1: Gestion de l'eau et Nourrissage -->
                        <div class="control-card">
                            <h3><i class="fas fa-tint"></i> Gestion de l'eau</h3>
                            
                            {% set params = {} %}
                            {% for output in outputs %}
                                {% if output.gpio == 100 %}{% set params = params|merge({'mail': output.state}) %}{% endif %}
                                {% if output.gpio == 101 %}{% set params = params|merge({'mailNotif': output.state}) %}{% endif %}
                                {% if output.gpio == 102 %}{% set params = params|merge({'aqThr': output.state}) %}{% endif %}
                                {% if output.gpio == 103 %}{% set params = params|merge({'taThr': output.state}) %}{% endif %}
                                {% if output.gpio == 104 %}{% set params = params|merge({'chauff': output.state}) %}{% endif %}
                                {% if output.gpio == 105 %}{% set params = params|merge({'bouffeMat': output.state}) %}{% endif %}
                                {% if output.gpio == 106 %}{% set params = params|merge({'bouffeMid': output.state}) %}{% endif %}
                                {% if output.gpio == 107 %}{% set params = params|merge({'bouffeSoir': output.state}) %}{% endif %}
                                {% if output.gpio == 111 %}{% set params = params|merge({'tempsGros': output.state}) %}{% endif %}
                                {% if output.gpio == 112 %}{% set params = params|merge({'tempsPetits': output.state}) %}{% endif %}
                                {% if output.gpio == 113 %}{% set params = params|merge({'tempsRemplissageSec': output.state}) %}{% endif %}
                                {% if output.gpio == 114 %}{% set params = params|merge({'limFlood': output.state}) %}{% endif %}
                                {% if output.gpio == 115 %}{% set params = params|merge({'WakeUp': output.state}) %}{% endif %}
                                {% if output.gpio == 116 %}{% set params = params|merge({'FreqWakeUp': output.state}) %}{% endif %}
                            {% endfor %}
                            
                            <!-- Boutons des pompes -->
                            {% set pump_outputs = outputs|filter(o => o.name|lower matches '/pompe aqua/' or o.name|lower matches '/pompe.*r.*serve/') %}
                            {% if pump_outputs|length > 0 %}
                                <div class="action-buttons-grid">
                                    {% for output in pump_outputs %}
                                        {% set clean_name = output.name|replace({
                                            '(stopp&#233;s si relais activ&#233;)': '',
                                            '(stopp&#233;e si relais activ&#233;)': '',
                                            '(stoppés si relais activé)': '',
                                            '(stoppée si relais activé)': '',
                                            ' (stopp&#233;s si relais activ&#233;)': '',
                                            ' (stopp&#233;e si relais activ&#233;)': '',
                                            ' (stoppés si relais activé)': '',
                                            ' (stoppée si relais activé)': ''
                                        })|trim %}
                                        
                                        {% if clean_name|lower matches '/pompe aqua/' %}
                                            {% set icon = 'fa-water' %}
                                            {% set color = '#2980b9' %}
                                            {% set display_name = 'Pompe aquarium' %}
                                        {% elseif clean_name|lower matches '/pompe.*r.*serve/' %}
                                            {% set icon = 'fa-droplet' %}
                                            {% set color = '#00bcd4' %}
                                            {% set display_name = 'Pompe réserve' %}
                                        {% else %}
                                            {% set icon = 'fa-circle' %}
                                            {% set color = '#008B74' %}
                                            {% set display_name = clean_name %}
                                        {% endif %}
                                        
                                        <div class="action-button-card action-button-blue" data-state="{{ output.state }}">
                                            <div class="action-button-content">
                                                <i class="fas {{ icon }} action-icon-simple" style="color: {{ color }};"></i>
                                                <div class="action-button-info">
                                                    <div class="action-button-label">{{ display_name }}</div>
                                                    <div class="action-button-status">
                                                        <span class="status-text">
                                                            {% if output.gpio == 18 %}
                                                                {{ output.state == 0 ? 'Activé' : 'Désactivé' }}
                                                            {% else %}
                                                                {{ output.state == 1 ? 'Activé' : 'Désactivé' }}
                                                            {% endif %}
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>
                                            <label class="modern-switch">
                                                <input type="checkbox" 
                                                       onchange="updateOutput(this)" 
                                                       id="{{ output.id }}" 
                                                       data-id="{{ output.id }}"
                                                       data-gpio="{{ output.gpio }}"
                                                       {% if output.gpio == 18 %}{{ output.state == 0 ? 'checked' : '' }}{% else %}{{ output.state == 1 ? 'checked' : '' }}{% endif %}>
                                                <span class="modern-switch-slider">
                                                    <span class="modern-switch-button"></span>
                                                </span>
                                            </label>
                                        </div>
                                    {% endfor %}
                                </div>
                            {% endif %}
                            
                            <!-- Paramètres de l'eau -->
                            <div class="param-box">
                                <h4><i class="fas fa-cog"></i> Paramètres de niveau</h4>
                                <div class="param-grid param-grid-2">
                                    <div>
                                        <label for="aqThr">Aquarium bas (cm)</label>
                                        <input type="number" name="aqThr" min="0" id="aqThr" value="{{ params.aqThr|default(0) }}" onchange="autoSaveParameter('aqThr', this.value)">
                                    </div>
                                    <div>
                                        <label for="limFlood">Débordement (cm)</label>
                                        <input type="number" name="limFlood" min="0" id="limFlood" value="{{ params.limFlood|default(0) }}" onchange="autoSaveParameter('limFlood', this.value)">
                                    </div>
                                    <div>
                                        <label for="tempsRemplissageSec">Remplissage (s)</label>
                                        <input type="number" name="tempsRemplissageSec" min="0" id="tempsRemplissageSec" value="{{ params.tempsRemplissageSec|default(0) }}" onchange="autoSaveParameter('tempsRemplissageSec', this.value)">
                                    </div>
                                    <div>
                                        <label for="taThr">Réserve basse (cm)</label>
                                        <input type="number" name="taThr" min="0" id="taThr" value="{{ params.taThr|default(0) }}" onchange="autoSaveParameter('taThr', this.value)">
                                    </div>
                                </div>
                            </div>
                            
                            <h3><i class="fas fa-bowl-food"></i> Nourrissage</h3>
                            
                            <!-- Boutons de nourrissage -->
                            {% set feeding_outputs = outputs|filter(o => o.gpio == 108 or o.gpio == 109) %}
                            {% if feeding_outputs|length > 0 %}
                                <div class="action-buttons-grid">
                                    {% for output in feeding_outputs %}
                                        {% set clean_name = output.gpio == 108 ? 'Petits poissons' : 'Gros poissons' %}
                                        {% set icon = 'fa-fish' %}
                                        {% set color = '#e91e63' %}
                                        
                                        <div class="action-button-card action-button-pink" data-state="{{ output.state }}">
                                            <div class="action-button-content">
                                                <i class="fas {{ icon }} action-icon-simple" style="color: {{ color }};"></i>
                                                <div class="action-button-info">
                                                    <div class="action-button-label">{{ clean_name }}</div>
                                                    <div class="action-button-status">
                                                        <span class="status-text">{{ output.state == 1 ? 'Activé' : 'Désactivé' }}</span>
                                                    </div>
                                                </div>
                                            </div>
                                            <label class="modern-switch">
                                                <input type="checkbox" 
                                                       onchange="updateOutput(this)" 
                                                       id="{{ output.id }}" 
                                                       data-id="{{ output.id }}"
                                                       data-gpio="{{ output.gpio }}"
                                                       {{ output.state == 1 ? 'checked' : '' }}>
                                                <span class="modern-switch-slider">
                                                    <span class="modern-switch-button"></span>
                                                </span>
                                            </label>
                                        </div>
                                    {% endfor %}
                                </div>
                            {% endif %}
                            
                            <!-- Paramètres de nourrissage -->
                            <div class="param-box">
                                <h4><i class="fas fa-clock"></i> Programmation automatique</h4>
                                <div class="param-grid">
                                    <div>
                                        <label>Horaires (0-23h)</label>
                                        <div class="param-grid param-grid-3">
                                            <div>
                                                <label for="bouffeMat">Matin</label>
                                                <input type="number" name="bouffeMat" min="0" max="23" id="bouffeMat" value="{{ params.bouffeMat|default(0) }}" onchange="autoSaveParameter('bouffeMat', this.value)">
                                            </div>
                                            <div>
                                                <label for="bouffeMid">Midi</label>
                                                <input type="number" name="bouffeMid" min="0" max="23" id="bouffeMid" value="{{ params.bouffeMid|default(0) }}" onchange="autoSaveParameter('bouffeMid', this.value)">
                                            </div>
                                            <div>
                                                <label for="bouffeSoir">Soir</label>
                                                <input type="number" name="bouffeSoir" min="0" max="23" id="bouffeSoir" value="{{ params.bouffeSoir|default(0) }}" onchange="autoSaveParameter('bouffeSoir', this.value)">
                                            </div>
                                        </div>
                                    </div>
                                    <div>
                                        <label>Durées (secondes)</label>
                                        <div class="param-grid param-grid-2">
                                            <div>
                                                <label for="tempsGros">Gros poissons</label>
                                                <input type="number" name="tempsGros" min="0" id="tempsGros" value="{{ params.tempsGros|default(0) }}" onchange="autoSaveParameter('tempsGros', this.value)">
                                            </div>
                                            <div>
                                                <label for="tempsPetits">Petits poissons</label>
                                                <input type="number" name="tempsPetits" min="0" id="tempsPetits" value="{{ params.tempsPetits|default(0) }}" onchange="autoSaveParameter('tempsPetits', this.value)">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Colonne 2: Chauffage, Lumière, Email et Système -->
                        <div class="control-card">
                            <h3><i class="fas fa-temperature-half"></i> Chauffage & Lumière</h3>
                            
                            <!-- Boutons chauffage et lumière -->
                            {% set heating_light_outputs = outputs|filter(o => o.name|lower matches '/radiateur/' or o.name|lower matches '/lumi.*re/') %}
                            {% if heating_light_outputs|length > 0 %}
                                <div class="action-buttons-grid">
                                    {% for output in heating_light_outputs %}
                                        {% set clean_name = output.name|replace({
                                            '(stopp&#233;s si relais activ&#233;)': '',
                                            '(stopp&#233;e si relais activ&#233;)': '',
                                            '(stoppés si relais activé)': '',
                                            '(stoppée si relais activé)': '',
                                            ' (stopp&#233;s si relais activ&#233;)': '',
                                            ' (stopp&#233;e si relais activ&#233;)': '',
                                            ' (stoppés si relais activé)': '',
                                            ' (stoppée si relais activé)': ''
                                        })|trim %}
                                        
                                        {% if clean_name|lower matches '/radiateur/' %}
                                            {% set icon = 'fa-temperature-high' %}
                                            {% set color = '#e74c3c' %}
                                            {% set display_name = 'Radiateur' %}
                                        {% elseif clean_name|lower matches '/lumi.*re/' %}
                                            {% set icon = 'fa-lightbulb' %}
                                            {% set color = '#f39c12' %}
                                            {% set display_name = 'Lumière' %}
                                        {% else %}
                                            {% set icon = 'fa-circle' %}
                                            {% set color = '#008B74' %}
                                            {% set display_name = clean_name %}
                                        {% endif %}
                                        
                                        <div class="action-button-card action-button-red" data-state="{{ output.state }}">
                                            <div class="action-button-content">
                                                <i class="fas {{ icon }} action-icon-simple" style="color: {{ color }};"></i>
                                                <div class="action-button-info">
                                                    <div class="action-button-label">{{ display_name }}</div>
                                                    <div class="action-button-status">
                                                        <span class="status-text">{{ output.state == 1 ? 'Activé' : 'Désactivé' }}</span>
                                                    </div>
                                                </div>
                                            </div>
                                            <label class="modern-switch">
                                                <input type="checkbox" 
                                                       onchange="updateOutput(this)" 
                                                       id="{{ output.id }}" 
                                                       data-id="{{ output.id }}"
                                                       data-gpio="{{ output.gpio }}"
                                                       {{ output.state == 1 ? 'checked' : '' }}>
                                                <span class="modern-switch-slider">
                                                    <span class="modern-switch-button"></span>
                                                </span>
                                            </label>
                                        </div>
                                    {% endfor %}
                                </div>
                            {% endif %}
                            
                            <!-- Paramètres de température -->
                            <div class="param-box">
                                <h4><i class="fas fa-thermometer-half"></i> Paramètres de température</h4>
                                <div class="param-grid">
                                    <div>
                                        <label for="chauff">Température min. (°C)</label>
                                        <input type="number" name="chauff" min="0" step="0.1" id="chauff" value="{{ params.chauff|default(0) }}" onchange="autoSaveParameter('chauff', this.value)">
                                    </div>
                                </div>
                            </div>
                            
                            <h3><i class="fas fa-envelope"></i> Email de notification</h3>
                            
                            <!-- Bouton notifications -->
                            {% set notification_outputs = outputs|filter(o => o.gpio == 101) %}
                            {% if notification_outputs|length > 0 %}
                                <div class="action-buttons-grid">
                                    {% for output in notification_outputs %}
                                        <div class="action-button-card action-button-purple" data-state="{{ output.state }}">
                                            <div class="action-button-content">
                                                <i class="fas fa-bell action-icon-simple" style="color: #9b59b6;"></i>
                                                <div class="action-button-info">
                                                    <div class="action-button-label">Notifications</div>
                                                    <div class="action-button-status">
                                                        <span class="status-text">{{ output.state == 1 ? 'Activé' : 'Désactivé' }}</span>
                                                    </div>
                                                </div>
                                            </div>
                                            <label class="modern-switch">
                                                <input type="checkbox" 
                                                       onchange="updateOutput(this)" 
                                                       id="{{ output.id }}" 
                                                       data-id="{{ output.id }}"
                                                       data-gpio="{{ output.gpio }}"
                                                       {{ output.state == 1 ? 'checked' : '' }}>
                                                <span class="modern-switch-slider">
                                                    <span class="modern-switch-button"></span>
                                                </span>
                                            </label>
                                        </div>
                                    {% endfor %}
                                </div>
                            {% endif %}
                            
                            <!-- Configuration email -->
                            <div class="param-box">
                                <h4><i class="fas fa-cog"></i> Configuration email</h4>
                                <div class="param-grid">
                                    <div>
                                        <label for="mail">Adresse email</label>
                                        <input type="email" name="mail" id="mail" value="{{ params.mail|default('') }}" placeholder="email@exemple.com" onchange="autoSaveParameter('mail', this.value)">
                                    </div>
                                </div>
                            </div>
                            
                            <h3><i class="fas fa-microchip"></i> Système</h3>
                            
                            <!-- Boutons système -->
                            {% set system_outputs = outputs|filter(o => o.gpio == 110 or o.gpio == 115) %}
                            {% if system_outputs|length > 0 %}
                                <div class="action-buttons-grid">
                                    {% for output in system_outputs %}
                                        {% if output.gpio == 110 %}
                                            {% set icon = 'fa-arrows-rotate' %}
                                            {% set color = '#e74c3c' %}
                                            {% set display_name = 'Reset ESP' %}
                                        {% elseif output.gpio == 115 %}
                                            {% set icon = 'fa-clock' %}
                                            {% set color = '#e67e22' %}
                                            {% set display_name = 'Forçage réveil' %}
                                        {% else %}
                                            {% set icon = 'fa-circle' %}
                                            {% set color = '#008B74' %}
                                            {% set display_name = output.name %}
                                        {% endif %}
                                        
                                        <div class="action-button-card action-button-red" data-state="{{ output.state }}">
                                            <div class="action-button-content">
                                                <i class="fas {{ icon }} action-icon-simple" style="color: {{ color }};"></i>
                                                <div class="action-button-info">
                                                    <div class="action-button-label">{{ display_name }}</div>
                                                    <div class="action-button-status">
                                                        <span class="status-text">{{ output.state == 1 ? 'Activé' : 'Désactivé' }}</span>
                                                    </div>
                                                </div>
                                            </div>
                                            <label class="modern-switch">
                                                <input type="checkbox" 
                                                       onchange="updateOutput(this)" 
                                                       id="{{ output.id }}" 
                                                       data-id="{{ output.id }}"
                                                       data-gpio="{{ output.gpio }}"
                                                       {{ output.state == 1 ? 'checked' : '' }}>
                                                <span class="modern-switch-slider">
                                                    <span class="modern-switch-button"></span>
                                                </span>
                                            </label>
                                        </div>
                                    {% endfor %}
                                </div>
                            {% endif %}
                            
                            <!-- Paramètres système -->
                            <div class="param-box">
                                <h4><i class="fas fa-cog"></i> Paramètres système</h4>
                                <div class="param-grid">
                                    <div>
                                        <label for="FreqWakeUp">Fréquence WakeUp (s)</label>
                                        <input type="number" name="FreqWakeUp" min="0" id="FreqWakeUp" value="{{ params.FreqWakeUp|default(0) }}" onchange="autoSaveParameter('FreqWakeUp', this.value)">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
                
                <!-- Section Actions rapides harmonisée -->
                <div class="actions-section">
                    <div class="section-header" style="justify-content: center; border: none; margin-bottom: 20px;">
                        <i class="fas fa-bolt"></i>
                        <h2>Actions rapides</h2>
                    </div>
                    <div class="actions-grid">
                        <a href="/ffp3/cronpompe.php" class="action-link">
                            <i class="fas fa-gears"></i> Cron manuel
                        </a>
                        <a href="/ffp3/cronlog.txt" class="action-link">
                            <i class="fas fa-file-lines"></i> Journal du cron
                        </a>
                        <a href="/ffp3/aquaponie{{ environment == 'test' ? '-test' : '' }}" class="action-link">
                            <i class="fas fa-chart-line"></i> Retour aux données
                        </a>
                    </div>
                </div>
            </article>
        </div>
        
        <!-- Footer harmonisé -->
        <footer id="footer" style="text-align: center; padding: 25px 0; color: #666; font-size: 0.9em; background: #f8f9fa; margin-top: 30px;">
            <p>
                <i class="fas fa-microchip"></i> {{ version }} | 
                <i class="fas fa-microchip"></i> Firmware ESP32: v{{ firmware_version }} | 
                <i class="fas fa-fish"></i> Système d'aquaponie FFP3 | 
                <i class="fas fa-copyright"></i> 2025 olution
            </p>
        </footer>
    </div>

    <!-- JavaScript harmonisé -->
    <script>
        const API_BASE = '/ffp3/api/outputs{{ environment == "test" ? "-test" : "" }}';
        let controlSync = null;
        
        function updateOutput(element) {
            var id = element.getAttribute('data-id');
            var gpio = element.getAttribute('data-gpio');
            var state = element.checked ? 1 : 0;
            var url = API_BASE + "/toggle?id=" + id + "&state=" + state;
            
            var card = element.closest('.action-button-card');
            var statusText = card ? card.querySelector('.status-text') : null;
            
            // Récupérer le nom de l'élément pour les logs
            var elementName = '';
            if (card) {
                var labelElement = card.querySelector('.action-button-label');
                if (labelElement) {
                    elementName = labelElement.textContent.trim();
                }
            }
            
            console.log("Toggle ID " + id + " (GPIO " + gpio + ") to state " + state);
            
            // Log de l'action utilisateur
            if (realtimeLogger) {
                realtimeLogger.logGpioChange(gpio, state === 1 ? 0 : 1, state, elementName);
                realtimeLogger.logApiCall('GET', url, 'En cours...');
            }
            
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function() {
                if (this.readyState === XMLHttpRequest.DONE) {
                    if (this.status === 200) {
                        if (card) {
                            card.setAttribute('data-state', state);
                            card.style.transition = 'all 0.3s ease';
                        }
                        if (statusText) {
                            statusText.textContent = state === 1 ? 'Activé' : 'Désactivé';
                            statusText.style.color = state === 1 ? '#27ae60' : '#7f8c8d';
                            statusText.style.fontWeight = state === 1 ? '600' : '400';
                        }
                        
                        // Log du succès
                        if (realtimeLogger) {
                            realtimeLogger.log('success', `Changement d'état réussi: ${elementName || 'GPIO ' + gpio}`, 'GPIO');
                        }
                        
                        if (controlSync) {
                            setTimeout(() => controlSync.forceSync(), 500);
                        }
                    } else {
                        console.error("Toggle failed!");
                        
                        // Log de l'erreur
                        if (realtimeLogger) {
                            realtimeLogger.logError(`Échec du changement d'état pour ${elementName || 'GPIO ' + gpio} (HTTP ${this.status})`, 'GPIO');
                        }
                        
                        alert("Erreur lors du changement d'état (ID " + id + ")");
                        element.checked = !element.checked;
                    }
                }
            };
            xhr.open("GET", url, true);
            xhr.send();
        }

        // Fonctions globales pour la sauvegarde automatique des paramètres
        function autoSaveParameter(paramName, paramValue) {
            showSaveIndicator(paramName);
            
            var httpRequestData = paramName + "=" + encodeURIComponent(paramValue);
            
            // Utiliser la route API correcte selon l'environnement
            var apiUrl = API_BASE + "/parameters";
            
            // Log de la sauvegarde
            if (realtimeLogger) {
                realtimeLogger.log('info', `Sauvegarde paramètre: ${paramName} = ${paramValue}`, 'Paramètres');
            }
            
            var xhr = new XMLHttpRequest();
            xhr.open("POST", apiUrl, true);
            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4) {
                    if (xhr.status === 200) {
                        showSuccessIndicator(paramName);
                        if (realtimeLogger) {
                            realtimeLogger.log('success', `Paramètre ${paramName} sauvegardé`, 'Paramètres');
                        }
                    } else {
                        showErrorIndicator(paramName);
                        if (realtimeLogger) {
                            realtimeLogger.logError(`Échec sauvegarde ${paramName} (HTTP ${xhr.status})`, 'Paramètres');
                        }
                    }
                }
            };
            
            xhr.send(httpRequestData);
        }
        
        function showSaveIndicator(paramName) {
            var input = document.getElementById(paramName);
            if (input) {
                input.style.borderColor = '#ffa500';
                input.style.backgroundColor = '#fff8e1';
                
                var indicator = document.createElement('span');
                indicator.id = 'save-indicator-' + paramName;
                indicator.innerHTML = ' 💾';
                indicator.style.color = '#ffa500';
                indicator.style.fontSize = '0.8em';
                input.parentNode.appendChild(indicator);
            }
        }
        
        function showSuccessIndicator(paramName) {
            var input = document.getElementById(paramName);
            var indicator = document.getElementById('save-indicator-' + paramName);
            
            if (input) {
                input.style.borderColor = '#4caf50';
                input.style.backgroundColor = '#e8f5e9';
                
                if (indicator) {
                    indicator.innerHTML = ' ✅';
                    indicator.style.color = '#4caf50';
                    
                    setTimeout(function() {
                        if (indicator && indicator.parentNode) {
                            indicator.parentNode.removeChild(indicator);
                        }
                        input.style.borderColor = '';
                        input.style.backgroundColor = '';
                    }, 2000);
                }
            }
        }
        
        function showErrorIndicator(paramName) {
            var input = document.getElementById(paramName);
            var indicator = document.getElementById('save-indicator-' + paramName);
            
            if (input) {
                input.style.borderColor = '#f44336';
                input.style.backgroundColor = '#ffebee';
                
                if (indicator) {
                    indicator.innerHTML = ' ❌';
                    indicator.style.color = '#f44336';
                    
                    setTimeout(function() {
                        if (indicator && indicator.parentNode) {
                            indicator.parentNode.removeChild(indicator);
                        }
                        input.style.borderColor = '';
                        input.style.backgroundColor = '';
                    }, 3000);
                }
            }
        }

        function createOutput() {
            var xhr = new XMLHttpRequest();
            xhr.open("POST", API_BASE + "/parameters", true);
            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");

            xhr.onreadystatechange = function() {
                if (this.readyState === XMLHttpRequest.DONE && this.status === 200) {
                    alert("Changement pris en compte");
                    setTimeout(function(){ window.location.reload(true); }, 1500);
                }
                else if (this.readyState === XMLHttpRequest.DONE) {
                    alert("Changement non pris en compte !");
                }
            }
            
            var mail = document.getElementById("mail").value;
            var aqThr = document.getElementById("aqThr").value;
            var taThr = document.getElementById("taThr").value;
            var tempsRemplissageSec = document.getElementById("tempsRemplissageSec").value;
            var limFlood = document.getElementById("limFlood").value;
            var chauff = document.getElementById("chauff").value;
            var bouffeMat = document.getElementById("bouffeMat").value;
            var bouffeMid = document.getElementById("bouffeMid").value;
            var bouffeSoir = document.getElementById("bouffeSoir").value;
            var tempsGros = document.getElementById("tempsGros").value;
            var tempsPetits = document.getElementById("tempsPetits").value;
            var FreqWakeUp = document.getElementById("FreqWakeUp").value;

            var httpRequestData = "mail="+mail+"&aqThr="+aqThr+"&tempsRemplissageSec="+tempsRemplissageSec+"&limFlood="+limFlood+"&taThr="+taThr+"&chauff="+chauff+"&bouffeMat="+bouffeMat+"&bouffeMid="+bouffeMid+"&bouffeSoir="+bouffeSoir+"&tempsGros="+tempsGros+"&tempsPetits="+tempsPetits+"&FreqWakeUp="+FreqWakeUp;
            
            xhr.send(httpRequestData);
            
            return false;
        }
        
        // Initialisation harmonisée
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(checkFontAwesomeLoaded, 500);
            
            // Initialiser le système de logs temps réel
            realtimeLogger = new RealtimeLogger();
            window.realtimeLogger = realtimeLogger; // Exposer globalement pour debug
            
            const controlValuesUpdater = new ControlValuesUpdater();
            controlValuesUpdater.init();
            window.controlValuesUpdater = controlValuesUpdater;
            
            // Initialiser le panneau d'état du système
            initializeSystemHealthPanel();
            
            const syncScript = document.createElement('script');
            syncScript.src = '/ffp3/assets/js/control-sync.js';
            syncScript.onload = function() {
                console.log('[Control] Initializing real-time sync...');
                
                controlSync = new ControlSync({
                    apiBase: API_BASE,
                    pollInterval: 10,
                    maxRetries: 5,
                    
                    onStateChange: function(changes) {
                        console.log('[Control] State changes detected:', changes);
                        
                        // Log des changements d'état détectés
                        if (realtimeLogger && changes.length > 0) {
                            changes.forEach(change => {
                                const gpioName = getGpioName(change.gpio);
                                realtimeLogger.logSyncEvent(`Changement détecté: ${gpioName || 'GPIO ' + change.gpio}`, 
                                    `${change.oldState} → ${change.newState}`);
                            });
                        }
                        
                        if (window.controlValuesUpdater) {
                            changes.forEach(change => {
                                if (change.gpio >= 100) {
                                    controlValuesUpdater.updateParameterDisplay(change.gpio, change.newState);
                                }
                            });
                        }
                    },
                    
                    onStatusChange: function(status) {
                        console.log('[Control] Sync status:', status);
                        
                        // Log des changements de statut de synchronisation
                        if (realtimeLogger) {
                            const statusMessages = {
                                'connecting': 'Connexion en cours...',
                                'online': 'Synchronisation active',
                                'offline': 'Synchronisation interrompue',
                                'error': 'Erreur de synchronisation',
                                'warning': 'Attention synchronisation'
                            };
                            realtimeLogger.logSyncEvent('Statut', statusMessages[status] || status);
                        }
                    }
                });
                
                controlSync.initializeFromDOM();
                controlSync.start();
                
                console.log('[Control] Real-time sync started (polling every 10s)');
            };
            
            syncScript.onerror = function() {
                console.error('[Control] Failed to load control-sync.js');
            };
            
            document.head.appendChild(syncScript);
        });
        
        // Fonction d'initialisation du panneau d'état du système
        function initializeSystemHealthPanel() {
            console.log('[Control] Initializing system health panel...');
            
            // Variables pour le système de santé
            let healthUpdateInterval = null;
            let countdownInterval = null;
            let currentCountdown = 15;
            let isLiveMode = true;
            let pollInterval = 10; // secondes
            
            // Éléments DOM
            const liveModeToggle = document.getElementById('live-mode-toggle');
            const pollIntervalSelect = document.getElementById('poll-interval-select');
            const manualSyncBtn = document.getElementById('manual-sync-btn');
            const healthSpinner = document.getElementById('health-spinner');
            const systemStatusIndicator = document.getElementById('system-status-indicator');
            const lastReadingTime = document.getElementById('last-reading-time');
            const systemUptime = document.getElementById('system-uptime');
            const readingsToday = document.getElementById('readings-today');
            const countdownSeconds = document.getElementById('countdown-seconds');
            const nextUpdateInfo = document.getElementById('next-update-info');
            
             // Fonction pour mettre à jour les données de santé
             async function updateSystemHealth() {
                 if (!isLiveMode) return;
                 
                 try {
                     console.log('[Control] Updating system health...');
                     
                     // Log du début de la mise à jour
                     if (realtimeLogger) {
                         realtimeLogger.log('info', 'Mise à jour des données de santé du système', 'Santé');
                     }
                     
                     // Ajouter l'animation de rotation au spinner
                     if (healthSpinner) {
                         healthSpinner.classList.add('spinning');
                     }
                     
                     // Utiliser l'API de santé du système (si disponible)
                     const apiUrl = '/ffp3/api/health{{ environment == "test" ? "-test" : "" }}';
                     
                     const response = await fetch(apiUrl, {
                         method: 'GET',
                         headers: {
                             'Accept': 'application/json',
                             'Cache-Control': 'no-cache'
                         }
                     });
                     
                     if (response.ok) {
                         const healthData = await response.json();
                         updateHealthDisplay(healthData);
                         updateSystemStatus('online');
                         
                         // Log du succès
                         if (realtimeLogger) {
                             realtimeLogger.log('success', 'Données de santé mises à jour avec succès', 'Santé');
                         }
                     } else {
                         throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                     }
                     
                 } catch (error) {
                     console.error('[Control] Health update failed:', error);
                     updateSystemStatus('error');
                     updateHealthDisplay({
                         lastReadingTime: 'Erreur de connexion',
                         systemUptime: 'N/A',
                         readingsToday: 'N/A'
                     });
                     
                     // Log de l'erreur
                     if (realtimeLogger) {
                         realtimeLogger.logError(`Échec mise à jour santé: ${error.message}`, 'Santé');
                     }
                 } finally {
                     // Retirer l'animation de rotation
                     if (healthSpinner) {
                         healthSpinner.classList.remove('spinning');
                     }
                 }
             }
            
            // Fonction pour mettre à jour l'affichage des données de santé
            function updateHealthDisplay(data) {
                if (lastReadingTime && data.lastReadingTime) {
                    lastReadingTime.innerHTML = `<i class="fas fa-clock"></i> ${data.lastReadingTime}`;
                }
                
                if (systemUptime && data.systemUptime) {
                    systemUptime.innerHTML = `<i class="fas fa-server"></i> ${data.systemUptime}`;
                }
                
                if (readingsToday && data.readingsToday) {
                    readingsToday.innerHTML = `<i class="fas fa-chart-line"></i> ${data.readingsToday}`;
                }
            }
            
            // Fonction pour mettre à jour le statut du système
            function updateSystemStatus(status) {
                if (!systemStatusIndicator) return;
                
                // Retirer toutes les classes de statut
                systemStatusIndicator.className = 'status-indicator';
                
                switch (status) {
                    case 'online':
                        systemStatusIndicator.classList.add('status-online');
                        systemStatusIndicator.innerHTML = '<i class="fas fa-check-circle"></i> En ligne';
                        break;
                    case 'offline':
                        systemStatusIndicator.classList.add('status-offline');
                        systemStatusIndicator.innerHTML = '<i class="fas fa-times-circle"></i> Hors ligne';
                        break;
                    case 'warning':
                        systemStatusIndicator.classList.add('status-warning');
                        systemStatusIndicator.innerHTML = '<i class="fas fa-exclamation-triangle"></i> Attention';
                        break;
                    case 'error':
                        systemStatusIndicator.classList.add('status-error');
                        systemStatusIndicator.innerHTML = '<i class="fas fa-exclamation-circle"></i> Erreur';
                        break;
                }
            }
            
            // Fonction pour démarrer le compte à rebours
            function startCountdown() {
                currentCountdown = pollInterval;
                updateCountdownDisplay();
                
                if (countdownInterval) {
                    clearInterval(countdownInterval);
                }
                
                countdownInterval = setInterval(() => {
                    currentCountdown--;
                    updateCountdownDisplay();
                    
                    if (currentCountdown <= 0) {
                        clearInterval(countdownInterval);
                        if (isLiveMode) {
                            updateSystemHealth();
                            startCountdown();
                        }
                    }
                }, 1000);
            }
            
            // Fonction pour mettre à jour l'affichage du compte à rebours
            function updateCountdownDisplay() {
                if (countdownSeconds) {
                    countdownSeconds.textContent = currentCountdown;
                }
                
                if (nextUpdateInfo) {
                    if (isLiveMode) {
                        nextUpdateInfo.style.display = 'block';
                    } else {
                        nextUpdateInfo.style.display = 'none';
                    }
                }
            }
            
            // Fonction pour démarrer/arrêter le mode live
            function toggleLiveMode() {
                isLiveMode = !isLiveMode;
                
                if (isLiveMode) {
                    console.log('[Control] Live mode enabled');
                    updateSystemHealth();
                    startCountdown();
                } else {
                    console.log('[Control] Live mode disabled');
                    if (healthUpdateInterval) {
                        clearInterval(healthUpdateInterval);
                    }
                    if (countdownInterval) {
                        clearInterval(countdownInterval);
                    }
                    updateCountdownDisplay();
                }
            }
            
            // Fonction pour changer la fréquence de mise à jour
            function changePollInterval(newInterval) {
                pollInterval = parseInt(newInterval);
                console.log('[Control] Poll interval changed to:', pollInterval, 'seconds');
                
                if (isLiveMode) {
                    startCountdown();
                }
            }
            
            // Fonction de synchronisation manuelle
            async function manualSync() {
                console.log('[Control] Manual sync triggered');
                
                if (manualSyncBtn) {
                    manualSyncBtn.disabled = true;
                    manualSyncBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Sync...';
                }
                
                try {
                    await updateSystemHealth();
                    if (isLiveMode) {
                        startCountdown();
                    }
                } finally {
                    if (manualSyncBtn) {
                        manualSyncBtn.disabled = false;
                        manualSyncBtn.innerHTML = '<i class="fas fa-sync-alt"></i> Sync';
                    }
                }
            }
            
            // Attacher les événements
            if (liveModeToggle) {
                liveModeToggle.addEventListener('change', toggleLiveMode);
            }
            
            if (pollIntervalSelect) {
                pollIntervalSelect.addEventListener('change', (e) => {
                    changePollInterval(e.target.value);
                });
            }
            
            if (manualSyncBtn) {
                manualSyncBtn.addEventListener('click', manualSync);
            }
            
            // Initialisation
            console.log('[Control] System health panel initialized');
            
            // Démarrer en mode live par défaut
            if (isLiveMode) {
                updateSystemHealth();
                startCountdown();
            }
            
             // Exposer les fonctions globalement pour debug
             window.systemHealthPanel = {
                 updateHealth: updateSystemHealth,
                 toggleLive: toggleLiveMode,
                 manualSync: manualSync,
                 changeInterval: changePollInterval
             };
         }
         
         // ========================================
         // SYSTÈME DE LOGS TEMPS RÉEL
         // ========================================
         
         // Classe pour gérer les logs temps réel
         class RealtimeLogger {
             constructor() {
                 this.logs = [];
                 this.maxLogs = 1000; // Limite de logs en mémoire
                 this.isPaused = false;
                 this.filters = {
                     info: true,
                     success: true,
                     warning: true,
                     error: true,
                     debug: true,
                     gpio: true,
                     sync: true
                 };
                 
                 // Éléments DOM
                 this.logsContainer = document.getElementById('logs-container');
                 this.logsStatus = document.getElementById('logs-status');
                 this.pauseBtn = document.getElementById('pause-logs-btn');
                 this.clearBtn = document.getElementById('clear-logs-btn');
                 this.exportBtn = document.getElementById('export-logs-btn');
                 
                 // Initialiser les événements
                 this.initializeEvents();
                 
                 // Message de bienvenue
                 this.log('info', 'Système de logs temps réel initialisé', 'Système');
             }
             
             // Initialiser les événements
             initializeEvents() {
                 // Bouton pause/reprendre
                 if (this.pauseBtn) {
                     this.pauseBtn.addEventListener('click', () => {
                         this.togglePause();
                     });
                 }
                 
                 // Bouton vider
                 if (this.clearBtn) {
                     this.clearBtn.addEventListener('click', () => {
                         this.clearLogs();
                     });
                 }
                 
                 // Bouton exporter
                 if (this.exportBtn) {
                     this.exportBtn.addEventListener('click', () => {
                         this.exportLogs();
                     });
                 }
                 
                 // Filtres
                 const filterCheckboxes = document.querySelectorAll('.log-filter-checkbox');
                 filterCheckboxes.forEach(checkbox => {
                     checkbox.addEventListener('change', (e) => {
                         const level = e.target.id.replace('filter-', '');
                         this.filters[level] = e.target.checked;
                         this.refreshDisplay();
                     });
                 });
             }
             
             // Ajouter un log
             log(level, message, category = '') {
                 if (this.isPaused) return;
                 
                 const timestamp = new Date();
                 const logEntry = {
                     timestamp: timestamp,
                     level: level,
                     message: message,
                     category: category,
                     id: Date.now() + Math.random()
                 };
                 
                 // Ajouter au tableau des logs
                 this.logs.unshift(logEntry);
                 
                 // Limiter le nombre de logs
                 if (this.logs.length > this.maxLogs) {
                     this.logs = this.logs.slice(0, this.maxLogs);
                 }
                 
                 // Afficher si le filtre le permet
                 if (this.filters[level]) {
                     this.displayLog(logEntry);
                 }
                 
                 // Console pour debug
                 console.log(`[RealtimeLogger] ${level.toUpperCase()}: ${message}`);
             }
             
             // Afficher un log dans l'interface
             displayLog(logEntry) {
                 if (!this.logsContainer) return;
                 
                 const logElement = document.createElement('div');
                 logElement.className = `log-entry log-${logEntry.level} new-entry`;
                 logElement.id = `log-${logEntry.id}`;
                 
                 const timeStr = logEntry.timestamp.toLocaleTimeString('fr-FR', {
                     hour: '2-digit',
                     minute: '2-digit',
                     second: '2-digit'
                 });
                 
                 const categoryStr = logEntry.category ? `[${logEntry.category}] ` : '';
                 
                 logElement.innerHTML = `
                     <span class="log-timestamp">${timeStr}</span>
                     <span class="log-level ${logEntry.level}">${logEntry.level}</span>
                     <span class="log-message">${categoryStr}${logEntry.message}</span>
                 `;
                 
                 // Ajouter en haut du conteneur
                 this.logsContainer.insertBefore(logElement, this.logsContainer.firstChild);
                 
                 // Auto-scroll vers le haut
                 this.logsContainer.scrollTop = 0;
                 
                 // Retirer l'animation après 500ms
                 setTimeout(() => {
                     logElement.classList.remove('new-entry');
                 }, 500);
                 
                 // Limiter l'affichage (garder seulement les 100 derniers visibles)
                 const visibleLogs = this.logsContainer.querySelectorAll('.log-entry');
                 if (visibleLogs.length > 100) {
                     visibleLogs[visibleLogs.length - 1].remove();
                 }
             }
             
             // Rafraîchir l'affichage selon les filtres
             refreshDisplay() {
                 if (!this.logsContainer) return;
                 
                 // Vider le conteneur
                 this.logsContainer.innerHTML = '';
                 
                 // Réafficher les logs selon les filtres
                 this.logs.forEach(logEntry => {
                     if (this.filters[logEntry.level]) {
                         this.displayLog(logEntry);
                     }
                 });
             }
             
             // Basculer pause/reprendre
             togglePause() {
                 this.isPaused = !this.isPaused;
                 
                 if (this.isPaused) {
                     this.logsStatus.className = 'logs-status paused';
                     this.logsStatus.innerHTML = '<i class="fas fa-pause"></i> En pause';
                     this.pauseBtn.innerHTML = '<i class="fas fa-play"></i> Reprendre';
                     this.log('warning', 'Logs mis en pause', 'Système');
                 } else {
                     this.logsStatus.className = 'logs-status active';
                     this.logsStatus.innerHTML = '<i class="fas fa-circle"></i> Actif';
                     this.pauseBtn.innerHTML = '<i class="fas fa-pause"></i> Pause';
                     this.log('info', 'Logs repris', 'Système');
                 }
             }
             
             // Vider les logs
             clearLogs() {
                 this.logs = [];
                 if (this.logsContainer) {
                     this.logsContainer.innerHTML = '';
                 }
                 this.log('info', 'Logs vidés', 'Système');
             }
             
             // Exporter les logs
             exportLogs() {
                 const exportData = this.logs.map(log => {
                     return {
                         timestamp: log.timestamp.toISOString(),
                         level: log.level,
                         category: log.category,
                         message: log.message
                     };
                 });
                 
                 const blob = new Blob([JSON.stringify(exportData, null, 2)], {
                     type: 'application/json'
                 });
                 
                 const url = URL.createObjectURL(blob);
                 const a = document.createElement('a');
                 a.href = url;
                 a.download = `ffp3-control-logs-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.json`;
                 document.body.appendChild(a);
                 a.click();
                 document.body.removeChild(a);
                 URL.revokeObjectURL(url);
                 
                 this.log('success', 'Logs exportés', 'Système');
             }
             
             // Méthodes spécialisées pour différents types d'événements
             logGpioChange(gpio, oldState, newState, name = '') {
                 const stateText = newState === 1 ? 'Activé' : 'Désactivé';
                 const nameStr = name ? `${name} (GPIO ${gpio})` : `GPIO ${gpio}`;
                 this.log('gpio', `${nameStr}: ${stateText}`, 'GPIO');
             }
             
             logSyncEvent(event, details = '') {
                 this.log('sync', `${event}${details ? ': ' + details : ''}`, 'Synchronisation');
             }
             
             logError(error, context = '') {
                 const contextStr = context ? `[${context}] ` : '';
                 this.log('error', `${contextStr}${error}`, 'Erreur');
             }
             
             logApiCall(method, url, status = null) {
                 const statusStr = status ? ` (${status})` : '';
                 this.log('info', `${method} ${url}${statusStr}`, 'API');
             }
         }
         
        // Instance globale du logger
        let realtimeLogger = null;
        
        // Fonction utilitaire pour obtenir le nom d'un GPIO
        function getGpioName(gpio) {
            const gpioNames = {
                2: 'Radiateur',
                15: 'Lumière',
                16: 'Pompe aquarium',
                18: 'Pompe réserve',
                100: 'Email',
                101: 'Notifications',
                102: 'Seuil aquarium',
                103: 'Seuil réserve',
                104: 'Température min',
                105: 'Nourrissage matin',
                106: 'Nourrissage midi',
                107: 'Nourrissage soir',
                108: 'Nourrisseur petits',
                109: 'Nourrisseur gros',
                110: 'Reset ESP',
                111: 'Temps gros poissons',
                112: 'Temps petits poissons',
                113: 'Temps remplissage',
                114: 'Limite débordement',
                115: 'Forçage réveil',
                116: 'Fréquence réveil'
            };
            return gpioNames[gpio] || null;
        }
        
        // Fonction de vérification Font Awesome
        async function checkFontAwesomeLoaded() {
            console.log('[Control] 🔍 Diagnostic Font Awesome démarré...');
            
            const testIcon = document.createElement('i');
            testIcon.className = 'fas fa-check';
            testIcon.style.cssText = 'position: absolute; left: -9999px; font-family: "Font Awesome 6 Free"; font-weight: 900;';
            document.body.appendChild(testIcon);
            
            const computedFont = window.getComputedStyle(testIcon).fontFamily;
            const fontDeclared = computedFont.includes('Font Awesome') || computedFont.includes('FontAwesome');
            console.log('[Control] Test 1 - Font Family:', computedFont, fontDeclared ? '✅' : '❌');
            
            const beforeStyle = window.getComputedStyle(testIcon, '::before');
            const beforeFont = beforeStyle.fontFamily;
            const beforeContent = beforeStyle.content;
            const beforeValid = (beforeFont.includes('Font Awesome') || beforeFont.includes('FontAwesome')) && beforeContent !== 'none';
            console.log('[Control] Test 2 - ::before Font:', beforeFont, '| Content:', beforeContent, beforeValid ? '✅' : '❌');
            
            document.body.removeChild(testIcon);
            
            let fontLoaded = false;
            if (document.fonts && document.fonts.check) {
                try {
                    fontLoaded = document.fonts.check('900 1em "Font Awesome 6 Free"');
                    console.log('[Control] Test 3 - WOFF2 chargé:', fontLoaded ? '✅' : '⏳ En cours...');
                    
                    if (!fontLoaded) {
                        await document.fonts.ready;
                        fontLoaded = document.fonts.check('900 1em "Font Awesome 6 Free"');
                        console.log('[Control] Test 3 - WOFF2 après attente:', fontLoaded ? '✅' : '❌');
                    }
                } catch (e) {
                    console.warn('[Control] Test 3 - Font Loading API non disponible:', e);
                }
            }
            
            const allOk = fontDeclared && beforeValid;
            
            if (!allOk) {
                console.error('[Control] ❌ PROBLÈME DÉTECTÉ avec Font Awesome!');
                
                const errorDiv = document.createElement('div');
                errorDiv.id = 'fa-error-notice';
                errorDiv.style.cssText = 'position: fixed; top: 60px; right: 20px; background: #e74c3c; color: white; padding: 15px; border-radius: 8px; z-index: 10000; max-width: 350px; box-shadow: 0 4px 12px rgba(0,0,0,0.3); font-size: 0.9em;';
                
                let errorMsg = '<strong>⚠️ Icônes Font Awesome</strong><br>';
                if (!fontDeclared) {
                    errorMsg += '❌ Police non déclarée<br>';
                }
                if (!beforeValid) {
                    errorMsg += '❌ Pseudo-élément ::before incorrect<br>';
                }
                if (!fontLoaded) {
                    errorMsg += '⏳ Police WOFF2 en chargement...<br>';
                }
                errorMsg += '<small>Vérifiez la console (F12) pour détails</small>';
                
                errorDiv.innerHTML = errorMsg;
                document.body.appendChild(errorDiv);
                
                setTimeout(() => {
                    const notice = document.getElementById('fa-error-notice');
                    if (notice) notice.remove();
                }, 12000);
            } else {
                console.log('[Control] ✅ Font Awesome complètement opérationnel!');
            }
            
            return allOk;
        }
    </script>

    <!-- Scripts -->
    <script src="https://iot.olution.info/assets/js/jquery.min.js"></script>
    <script src="https://iot.olution.info/assets/js/jquery.scrollex.min.js"></script>
    <script src="https://iot.olution.info/assets/js/jquery.scrolly.min.js"></script>
    <script src="https://iot.olution.info/assets/js/browser.min.js"></script>
    <script src="https://iot.olution.info/assets/js/breakpoints.min.js"></script>
    <script src="https://iot.olution.info/assets/js/util.js"></script>
    <script src="https://iot.olution.info/assets/js/main.js"></script>

    <!-- Module de mise à jour des valeurs affichées -->
    <script src="/ffp3/assets/js/control-values-updater.js"></script>
</body>
</html>