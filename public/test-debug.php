<?php
/**
 * Script de diagnostic - nom de fichier diff√©rent pour contourner les redirections
 * URL: https://iot.olution.info/ffp3/public/test-debug.php
 */

// D√©sactiver l'affichage d'erreurs pour √©viter les conflits
ini_set('display_errors', 1);
error_reporting(E_ALL);

echo "<h1>üîç Diagnostic FFP3 - " . date('Y-m-d H:i:s') . "</h1>";

try {
    echo "<h2>1. Test de l'environnement</h2>";
    
    // Charger l'autoloader
    require __DIR__ . '/../vendor/autoload.php';
    echo "‚úÖ Autoloader charg√©<br>";
    
    // Charger l'environnement
    App\Config\Env::load();
    echo "‚úÖ Environnement charg√©<br>";
    
    // Test de la connexion DB
    $pdo = new PDO(
        "mysql:host={$_ENV['DB_HOST']};dbname={$_ENV['DB_NAME']};charset=utf8mb4",
        $_ENV['DB_USER'],
        $_ENV['DB_PASS']
    );
    echo "‚úÖ Connexion DB r√©ussie<br>";
    
    echo "<h2>2. Test du container DI</h2>";
    
    // Test du container
    $container = require __DIR__ . '/../config/container.php';
    echo "‚úÖ Container DI cr√©√©<br>";
    
    echo "<h2>3. Test des services critiques</h2>";
    
    // Test OutputService
    try {
        $outputService = $container->get(\App\Service\OutputService::class);
        $outputs = $outputService->getAllOutputs();
        echo "‚úÖ OutputService: OK (" . count($outputs) . " outputs)<br>";
    } catch (\Throwable $e) {
        echo "‚ùå OutputService: " . $e->getMessage() . "<br>";
        echo "Fichier: " . $e->getFile() . " ligne " . $e->getLine() . "<br>";
    }
    
    // Test RealtimeDataService
    try {
        $realtimeService = $container->get(\App\Service\RealtimeDataService::class);
        $data = $realtimeService->getLatestReadings();
        echo "‚úÖ RealtimeDataService: OK<br>";
    } catch (\Throwable $e) {
        echo "‚ùå RealtimeDataService: " . $e->getMessage() . "<br>";
        echo "Fichier: " . $e->getFile() . " ligne " . $e->getLine() . "<br>";
    }
    
    // Test TemplateRenderer
    try {
        $renderer = $container->get(\App\Service\TemplateRenderer::class);
        echo "‚úÖ TemplateRenderer: OK<br>";
    } catch (\Throwable $e) {
        echo "‚ùå TemplateRenderer: " . $e->getMessage() . "<br>";
        echo "Fichier: " . $e->getFile() . " ligne " . $e->getLine() . "<br>";
    }
    
    echo "<h2>4. Test des contr√¥leurs</h2>";
    
    // Test OutputController
    try {
        $outputController = $container->get(\App\Controller\OutputController::class);
        echo "‚úÖ OutputController: OK<br>";
        
        // Test des m√©thodes
        $outputs = $outputController->outputService->getAllOutputs();
        echo "  ‚îî‚îÄ getAllOutputs(): OK (" . count($outputs) . " outputs)<br>";
        
        $boards = $outputController->outputService->getActiveBoardsForCurrentEnvironment();
        echo "  ‚îî‚îÄ getActiveBoardsForCurrentEnvironment(): OK (" . count($boards) . " boards)<br>";
        
    } catch (\Throwable $e) {
        echo "‚ùå OutputController: " . $e->getMessage() . "<br>";
        echo "Fichier: " . $e->getFile() . " ligne " . $e->getLine() . "<br>";
        echo "<pre>" . $e->getTraceAsString() . "</pre>";
    }
    
    // Test RealtimeApiController
    try {
        $realtimeController = $container->get(\App\Controller\RealtimeApiController::class);
        echo "‚úÖ RealtimeApiController: OK<br>";
        
        // Test des m√©thodes
        $data = $realtimeController->realtimeService->getLatestReadings();
        echo "  ‚îî‚îÄ getLatestReadings(): OK<br>";
        
        $outputsState = $realtimeController->realtimeService->getOutputsState();
        echo "  ‚îî‚îÄ getOutputsState(): OK<br>";
        
    } catch (\Throwable $e) {
        echo "‚ùå RealtimeApiController: " . $e->getMessage() . "<br>";
        echo "Fichier: " . $e->getFile() . " ligne " . $e->getLine() . "<br>";
        echo "<pre>" . $e->getTraceAsString() . "</pre>";
    }
    
    echo "<h2>5. Test des templates</h2>";
    
    // V√©rifier l'existence des templates
    $templates = [
        'control.twig',
        'aquaponie.twig',
        'dashboard.twig',
        'home.twig',
        'tide_stats.twig'
    ];
    
    foreach ($templates as $template) {
        $path = __DIR__ . '/../templates/' . $template;
        if (file_exists($path)) {
            echo "‚úÖ $template: existe<br>";
        } else {
            echo "‚ùå $template: manquant<br>";
        }
    }
    
    echo "<h2>6. Test de rendu de template</h2>";
    
    try {
        $renderer = $container->get(\App\Service\TemplateRenderer::class);
        $html = $renderer->render('home.twig', ['page_title' => 'Test', 'active_page' => 'home']);
        echo "‚úÖ Rendu template home.twig: OK<br>";
    } catch (\Throwable $e) {
        echo "‚ùå Rendu template: " . $e->getMessage() . "<br>";
        echo "Fichier: " . $e->getFile() . " ligne " . $e->getLine() . "<br>";
    }
    
    echo "<h2>7. Test de simulation des contr√¥leurs</h2>";
    
    // Simuler l'appel √† OutputController::showInterface
    try {
        $outputController = $container->get(\App\Controller\OutputController::class);
        
        // Cr√©er des objets Request et Response mock
        $request = new \Slim\Psr7\Factory\ServerRequestFactory();
        $response = new \Slim\Psr7\Factory\ResponseFactory();
        
        $mockRequest = $request->createServerRequest('GET', '/control');
        $mockResponse = $response->createResponse();
        
        echo "‚úÖ Objets Request/Response cr√©√©s<br>";
        
        // Tenter d'appeler la m√©thode
        $result = $outputController->showInterface($mockRequest, $mockResponse);
        echo "‚úÖ OutputController::showInterface() ex√©cut√© avec succ√®s<br>";
        
    } catch (\Throwable $e) {
        echo "‚ùå Erreur dans OutputController::showInterface(): " . $e->getMessage() . "<br>";
        echo "Fichier: " . $e->getFile() . " ligne " . $e->getLine() . "<br>";
        echo "<pre>" . $e->getTraceAsString() . "</pre>";
    }
    
    // Simuler l'appel √† RealtimeApiController::getLatestSensors
    try {
        $realtimeController = $container->get(\App\Controller\RealtimeApiController::class);
        
        $request = new \Slim\Psr7\Factory\ServerRequestFactory();
        $response = new \Slim\Psr7\Factory\ResponseFactory();
        
        $mockRequest = $request->createServerRequest('GET', '/api/realtime/sensors/latest');
        $mockResponse = $response->createResponse();
        
        $result = $realtimeController->getLatestSensors($mockRequest, $mockResponse);
        echo "‚úÖ RealtimeApiController::getLatestSensors() ex√©cut√© avec succ√®s<br>";
        
    } catch (\Throwable $e) {
        echo "‚ùå Erreur dans RealtimeApiController::getLatestSensors(): " . $e->getMessage() . "<br>";
        echo "Fichier: " . $e->getFile() . " ligne " . $e->getLine() . "<br>";
        echo "<pre>" . $e->getTraceAsString() . "</pre>";
    }
    
    echo "<h2>‚úÖ Diagnostic termin√©</h2>";
    echo "<p>Si tous les tests passent, le probl√®me 500 vient probablement du routage Slim ou des middlewares.</p>";
    
} catch (\Throwable $e) {
    echo "‚ùå ERREUR G√âN√âRALE: " . $e->getMessage() . "<br>";
    echo "Fichier: " . $e->getFile() . " ligne " . $e->getLine() . "<br>";
    echo "<pre>" . $e->getTraceAsString() . "</pre>";
}
?>
