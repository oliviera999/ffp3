<?php
/**
 * Script de diagnostic - nom de fichier compl√®tement diff√©rent
 * URL: https://iot.olution.info/ffp3/public/test123.php
 */

// D√©sactiver l'affichage d'erreurs pour √©viter les conflits
ini_set('display_errors', 1);
error_reporting(E_ALL);

echo "<h1>üîç Diagnostic Test123 - " . date('Y-m-d H:i:s') . "</h1>";

try {
    echo "<h2>1. Test de l'environnement</h2>";
    
    // Charger l'autoloader
    require __DIR__ . '/../vendor/autoload.php';
    echo "‚úÖ Autoloader charg√©<br>";
    
    // Charger l'environnement
    \App\Config\Env::load();
    echo "‚úÖ Environnement charg√©<br>";
    echo "ENV: " . ($_ENV['ENV'] ?? 'non d√©fini') . "<br>";
    
    // Test de la connexion DB
    $pdo = new PDO(
        "mysql:host={$_ENV['DB_HOST']};dbname={$_ENV['DB_NAME']};charset=utf8mb4",
        $_ENV['DB_USER'],
        $_ENV['DB_PASS']
    );
    echo "‚úÖ Connexion DB r√©ussie<br>";
    
    echo "<h2>2. Test de TableConfig</h2>";
    
    // Test TableConfig
    $dataTable = \App\Config\TableConfig::getDataTable();
    echo "‚úÖ Data Table: $dataTable<br>";
    
    $outputsTable = \App\Config\TableConfig::getOutputsTable();
    echo "‚úÖ Outputs Table: $outputsTable<br>";
    
    echo "<h2>3. Test des repositories</h2>";
    
    // Test SensorReadRepository
    $sensorRepo = new \App\Repository\SensorReadRepository($pdo);
    $lastReadings = $sensorRepo->getLastReadings();
    echo "‚úÖ SensorReadRepository: " . (is_array($lastReadings) ? "OK" : "ERREUR") . "<br>";
    
    // Test OutputRepository
    $outputRepo = new \App\Repository\OutputRepository($pdo);
    $outputs = $outputRepo->findAll();
    echo "‚úÖ OutputRepository: " . count($outputs) . " outputs trouv√©s<br>";
    
    // Test BoardRepository
    $boardRepo = new \App\Repository\BoardRepository($pdo);
    $boards = $boardRepo->findActiveForEnvironment($outputsTable);
    echo "‚úÖ BoardRepository: " . count($boards) . " boards trouv√©s<br>";
    
    echo "<h2>4. Test des services</h2>";
    
    // Test RealtimeDataService
    $realtimeService = new \App\Service\RealtimeDataService($sensorRepo, $outputRepo, $pdo);
    $latestReadings = $realtimeService->getLatestReadings();
    echo "‚úÖ RealtimeDataService::getLatestReadings: OK<br>";
    
    $outputsState = $realtimeService->getOutputsState();
    echo "‚úÖ RealtimeDataService::getOutputsState: " . count($outputsState) . " outputs<br>";
    
    $systemHealth = $realtimeService->getSystemHealth();
    echo "‚úÖ RealtimeDataService::getSystemHealth: " . ($systemHealth['online'] ? 'Online' : 'Offline') . "<br>";
    
    // Test OutputService
    $outputService = new \App\Service\OutputService($outputRepo, $boardRepo);
    $allOutputs = $outputService->getAllOutputs();
    echo "‚úÖ OutputService::getAllOutputs: " . count($allOutputs) . " outputs<br>";
    
    $activeBoards = $outputService->getActiveBoardsForCurrentEnvironment();
    echo "‚úÖ OutputService::getActiveBoardsForCurrentEnvironment: " . count($activeBoards) . " boards<br>";
    
    echo "<h2>5. Test du container DI</h2>";
    
    // Test du container
    $container = require __DIR__ . '/../config/container.php';
    echo "‚úÖ Container DI cr√©√©<br>";
    
    // Test des contr√¥leurs
    $outputController = $container->get(\App\Controller\OutputController::class);
    echo "‚úÖ OutputController r√©solu<br>";
    
    $realtimeController = $container->get(\App\Controller\RealtimeApiController::class);
    echo "‚úÖ RealtimeApiController r√©solu<br>";
    
    echo "<h2>6. Test de simulation des contr√¥leurs</h2>";
    
    // Simuler l'appel √† OutputController::showInterface
    try {
        $request = new \Slim\Psr7\Factory\ServerRequestFactory();
        $response = new \Slim\Psr7\Factory\ResponseFactory();
        
        $mockRequest = $request->createServerRequest('GET', '/control');
        $mockResponse = $response->createResponse();
        
        echo "‚úÖ Objets Request/Response cr√©√©s<br>";
        
        // Tenter d'appeler la m√©thode
        $result = $outputController->showInterface($mockRequest, $mockResponse);
        echo "‚úÖ OutputController::showInterface() ex√©cut√© avec succ√®s<br>";
        echo "Status Code: " . $result->getStatusCode() . "<br>";
        
    } catch (\Throwable $e) {
        echo "‚ùå Erreur dans OutputController::showInterface(): " . $e->getMessage() . "<br>";
        echo "Fichier: " . $e->getFile() . " ligne " . $e->getLine() . "<br>";
        echo "<pre>" . $e->getTraceAsString() . "</pre>";
    }
    
    // Simuler l'appel √† RealtimeApiController::getLatestSensors
    try {
        $request = new \Slim\Psr7\Factory\ServerRequestFactory();
        $response = new \Slim\Psr7\Factory\ResponseFactory();
        
        $mockRequest = $request->createServerRequest('GET', '/api/realtime/sensors/latest');
        $mockResponse = $response->createResponse();
        
        $result = $realtimeController->getLatestSensors($mockRequest, $mockResponse);
        echo "‚úÖ RealtimeApiController::getLatestSensors() ex√©cut√© avec succ√®s<br>";
        echo "Status Code: " . $result->getStatusCode() . "<br>";
        
    } catch (\Throwable $e) {
        echo "‚ùå Erreur dans RealtimeApiController::getLatestSensors(): " . $e->getMessage() . "<br>";
        echo "Fichier: " . $e->getFile() . " ligne " . $e->getLine() . "<br>";
        echo "<pre>" . $e->getTraceAsString() . "</pre>";
    }
    
    echo "<h2>‚úÖ Diagnostic termin√©</h2>";
    echo "<p>Si tous les tests passent, le probl√®me vient probablement du routage Slim ou des middlewares.</p>";
    
} catch (\Throwable $e) {
    echo "‚ùå ERREUR G√âN√âRALE: " . $e->getMessage() . "<br>";
    echo "Fichier: " . $e->getFile() . " ligne " . $e->getLine() . "<br>";
    echo "<pre>" . $e->getTraceAsString() . "</pre>";
}
?>
